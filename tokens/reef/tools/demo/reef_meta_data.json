{
    "AsMetadataV13": {
        "Modules": [
            // System
            {
                "Name": "System",
                "HasStorage": true,
                "Storage": {
                    "Prefix": "System",
                    "Items": [
                        {
                            "Name": "Account",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": true,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "T::AccountId",
                                    "Value": "AccountInfo\u003cT::Index, T::AccountData\u003e",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
                            "Documentation": [
                                " The full account information for a particular account ID."
                            
                            ]
                        
                        },
                        {
                            "Name": "ExtrinsicCount",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "u32",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Total extrinsics count for the current block."
                            
                            ]
                        
                        },
                        {
                            "Name": "BlockWeight",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "ConsumedWeight",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
                            "Documentation": [
                                " The current weight for the block."
                            
                            ]
                        
                        },
                        {
                            "Name": "AllExtrinsicsLen",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "u32",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Total length (in bytes) for all extrinsics put together, for the current block."
                            
                            ]
                        
                        },
                        {
                            "Name": "BlockHash",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "T::BlockNumber",
                                    "Value": "T::Hash",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
                            "Documentation": [
                                " Map of block numbers to block hashes."
                            
                            ]
                        
                        },
                        {
                            "Name": "ExtrinsicData",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "u32",
                                    "Value": "Vec\u003cu8\u003e",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                            
                            ]
                        
                        },
                        {
                            "Name": "Number",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "T::BlockNumber",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAA==",
                            "Documentation": [
                                " The current block number being processed. Set by `execute_block`."
                            
                            ]
                        
                        },
                        {
                            "Name": "ParentHash",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "T::Hash",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
                            "Documentation": [
                                " Hash of the previous block."
                            
                            ]
                        
                        },
                        {
                            "Name": "Digest",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "DigestOf\u003cT\u003e",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Digest of the current block, also part of the block header."
                            
                            ]
                        
                        },
                        {
                            "Name": "Events",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "Vec\u003cEventRecord\u003cT::Event, T::Hash\u003e\u003e",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Events deposited for the current block."
                            
                            ]
                        
                        },
                        {
                            "Name": "EventCount",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "EventIndex",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAA==",
                            "Documentation": [
                                " The number of events in the `Events\u003cT\u003e` list."
                            
                            ]
                        
                        },
                        {
                            "Name": "EventTopics",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": true,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "T::Hash",
                                    "Value": "Vec\u003c(T::BlockNumber, EventIndex)\u003e",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                                " of events in the `\u003cEvents\u003cT\u003e\u003e` list.",
                                "",
                                " All topic vectors have deterministic storage locations depending on the topic. This",
                                " allows light-clients to leverage the changes trie storage tracking mechanism and",
                                " in case of changes fetch the list of events of interest.",
                                "",
                                " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                                " the `EventIndex` then in case if the topic has the same contents on the next block",
                                " no notification will be triggered thus the event might be lost."
                            
                            ]
                        
                        },
                        {
                            "Name": "LastRuntimeUpgrade",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "LastRuntimeUpgradeInfo",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                            
                            ]
                        
                        },
                        {
                            "Name": "UpgradedToU32RefCount",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "bool",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
                            
                            ]
                        
                        },
                        {
                            "Name": "UpgradedToTripleRefCount",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "bool",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                                " (default) if not."
                            
                            ]
                        
                        },
                        {
                            "Name": "ExecutionPhase",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "Phase",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " The execution phase of the block."
                            
                            ]
                        
                        }
                    
                    ]
                
                },
                "HasCalls": true,
                "Calls": [
                    {
                        "Name": "fill_block",
                        "Args": [
                            {
                                "Name": "_ratio",
                                "Type": "Perbill"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " A dispatch that will fill the block weight up to the given ratio."
                        
                        ]
                    
                    },
                    {
                        "Name": "remark",
                        "Args": [
                            {
                                "Name": "_remark",
                                "Type": "Vec\u003cu8\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Make some on-chain remark.",
                            "",
                            " # \u003cweight\u003e",
                            " - `O(1)`",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "set_heap_pages",
                        "Args": [
                            {
                                "Name": "pages",
                                "Type": "u64"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Set the number of pages in the WebAssembly environment's heap.",
                            "",
                            " # \u003cweight\u003e",
                            " - `O(1)`",
                            " - 1 storage write.",
                            " - Base Weight: 1.405 µs",
                            " - 1 write to HEAP_PAGES",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "set_code",
                        "Args": [
                            {
                                "Name": "code",
                                "Type": "Vec\u003cu8\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Set the new runtime code.",
                            "",
                            " # \u003cweight\u003e",
                            " - `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`",
                            " - 1 storage write (codec `O(C)`).",
                            " - 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is expensive).",
                            " - 1 event.",
                            " The weight of this function is dependent on the runtime, but generally this is very expensive.",
                            " We will treat this as a full block.",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "set_code_without_checks",
                        "Args": [
                            {
                                "Name": "code",
                                "Type": "Vec\u003cu8\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Set the new runtime code without doing any checks of the given `code`.",
                            "",
                            " # \u003cweight\u003e",
                            " - `O(C)` where `C` length of `code`",
                            " - 1 storage write (codec `O(C)`).",
                            " - 1 event.",
                            " The weight of this function is dependent on the runtime. We will treat this as a full block.",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "set_changes_trie_config",
                        "Args": [
                            {
                                "Name": "changes_trie_config",
                                "Type": "Option\u003cChangesTrieConfiguration\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Set the new changes trie configuration.",
                            "",
                            " # \u003cweight\u003e",
                            " - `O(1)`",
                            " - 1 storage write or delete (codec `O(1)`).",
                            " - 1 call to `deposit_log`: Uses `append` API, so O(1)",
                            " - Base Weight: 7.218 µs",
                            " - DB Weight:",
                            "     - Writes: Changes Trie, System Digest",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "set_storage",
                        "Args": [
                            {
                                "Name": "items",
                                "Type": "Vec\u003cKeyValue\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Set some items of storage.",
                            "",
                            " # \u003cweight\u003e",
                            " - `O(I)` where `I` length of `items`",
                            " - `I` storage writes (`O(1)`).",
                            " - Base Weight: 0.568 * i µs",
                            " - Writes: Number of items",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "kill_storage",
                        "Args": [
                            {
                                "Name": "keys",
                                "Type": "Vec\u003cKey\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Kill some items from storage.",
                            "",
                            " # \u003cweight\u003e",
                            " - `O(IK)` where `I` length of `keys` and `K` length of one key",
                            " - `I` storage deletions.",
                            " - Base Weight: .378 * i µs",
                            " - Writes: Number of items",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "kill_prefix",
                        "Args": [
                            {
                                "Name": "prefix",
                                "Type": "Key"
                            
                            },
                            {
                                "Name": "_subkeys",
                                "Type": "u32"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Kill all storage items with a key that starts with the given prefix.",
                            "",
                            " **NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                            " the prefix we are removing to accurately calculate the weight of this function.",
                            "",
                            " # \u003cweight\u003e",
                            " - `O(P)` where `P` amount of keys with prefix `prefix`",
                            " - `P` storage deletions.",
                            " - Base Weight: 0.834 * P µs",
                            " - Writes: Number of subkeys + 1",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "remark_with_event",
                        "Args": [
                            {
                                "Name": "remark",
                                "Type": "Vec\u003cu8\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Make some on-chain remark and emit event.",
                            "",
                            " # \u003cweight\u003e",
                            " - `O(b)` where b is the length of the remark.",
                            " - 1 event.",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    }
                
                ],
                "HasEvents": true,
                "Events": [
                    {
                        "Name": "ExtrinsicSuccess",
                        "Args": [
                            "DispatchInfo"
                        
                        ],
                        "Documentation": [
                            " An extrinsic completed successfully. \\[info\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "ExtrinsicFailed",
                        "Args": [
                            "DispatchError",
                            "DispatchInfo"
                        
                        ],
                        "Documentation": [
                            " An extrinsic failed. \\[error, info\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "CodeUpdated",
                        "Args": null,
                        "Documentation": [
                            " `:code` was updated."
                        
                        ]
                    
                    },
                    {
                        "Name": "NewAccount",
                        "Args": [
                            "AccountId"
                        
                        ],
                        "Documentation": [
                            " A new \\[account\\] was created."
                        
                        ]
                    
                    },
                    {
                        "Name": "KilledAccount",
                        "Args": [
                            "AccountId"
                        
                        ],
                        "Documentation": [
                            " An \\[account\\] was reaped."
                        
                        ]
                    
                    },
                    {
                        "Name": "Remarked",
                        "Args": [
                            "AccountId",
                            "Hash"
                        
                        ],
                        "Documentation": [
                            " On on-chain remark happened. \\[origin, remark_hash\\]"
                        
                        ]
                    
                    }
                
                ],
                "Constants": [
                    {
                        "Name": "BlockWeights",
                        "Type": "limits::BlockWeights",
                        "Value": "APIFKgEAAAAAIEqp0QEAAEBZcwcAAAAAAcDKSJNRAQAAAQCY9z5dAQAAAQAAAAAAAAAAQFlzBwAAAAABwFKb/cUBAAABACBKqdEBAAABAIhSanQAAABAWXMHAAAAAAAAAA==",
                        "Documentation": [
                            " Block \u0026 extrinsics weights: base values and limits."
                        
                        ]
                    
                    },
                    {
                        "Name": "BlockLength",
                        "Type": "limits::BlockLength",
                        "Value": "AAA8AAAAUAAAAFAA",
                        "Documentation": [
                            " The maximum length of a block (in bytes)."
                        
                        ]
                    
                    },
                    {
                        "Name": "BlockHashCount",
                        "Type": "T::BlockNumber",
                        "Value": "YAkAAA==",
                        "Documentation": [
                            " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
                        
                        ]
                    
                    },
                    {
                        "Name": "DbWeight",
                        "Type": "RuntimeDbWeight",
                        "Value": "QHh9AQAAAAAA4fUFAAAAAA==",
                        "Documentation": [
                            " The weight of runtime database operations the runtime can invoke."
                        
                        ]
                    
                    },
                    {
                        "Name": "Version",
                        "Type": "RuntimeVersion",
                        "Value": "EHJlZWYQcmVlZgEAAAAKAAAACgAAADDfastomQdgmwMAAAA345f8fJH15AEAAABA/jrUAfiVmgUAAADSvJiX7tCPFQMAAAD3iyeL5T9FTAIAAADLyiXjnxQjhwIAAABoetRK038DwgEAAACrPAVyKR/riwEAAADtmcWssl7t9QMAAAC8nYmQT1uSPwEAAAA3yLsTUKmiqAEAAADj3z8qqKXMVwEAAAACAAAA",
                        "Documentation": [
                            " Get the chain's current version."
                        
                        ]
                    
                    },
                    {
                        "Name": "SS58Prefix",
                        "Type": "u16",
                        "Value": "KgA=",
                        "Documentation": [
                            " The designated SS85 prefix of this chain.",
                            "",
                            " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
                            " that the runtime should know about the prefix in order to make use of it as",
                            " an identifier of the chain."
                        
                        ]
                    
                    }
                
                ],
                "Errors": [
                    {
                        "Name": "InvalidSpecName",
                        "Documentation": [
                            " The name of specification does not match between the current runtime",
                            " and the new runtime."
                        
                        ]
                    
                    },
                    {
                        "Name": "SpecVersionNeedsToIncrease",
                        "Documentation": [
                            " The specification version is not allowed to decrease between the current runtime",
                            " and the new runtime."
                        
                        ]
                    
                    },
                    {
                        "Name": "FailedToExtractRuntimeVersion",
                        "Documentation": [
                            " Failed to extract the runtime version from the new runtime.",
                            "",
                            " Either calling `Core_version` or decoding `RuntimeVersion` failed."
                        
                        ]
                    
                    },
                    {
                        "Name": "NonDefaultComposite",
                        "Documentation": [
                            " Suicide called when the account has non-default composite data."
                        
                        ]
                    
                    },
                    {
                        "Name": "NonZeroRefCount",
                        "Documentation": [
                            " There is a non-zero reference count preventing the account from being purged."
                        
                        ]
                    
                    }
                
                ],
                "Index": 0
            
            },
            // RandomnessCollectiveFlip
            {
                "Name": "RandomnessCollectiveFlip",
                "HasStorage": true,
                "Storage": {
                    "Prefix": "RandomnessCollectiveFlip",
                    "Items": [
                        {
                            "Name": "RandomMaterial",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "Vec\u003cT::Hash\u003e",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Series of block headers from the last 81 blocks that acts as random seed material. This",
                                " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of",
                                " the oldest hash."
                            
                            ]
                        
                        }
                    
                    ]
                
                },
                "HasCalls": false,
                "Calls": null,
                "HasEvents": false,
                "Events": null,
                "Constants": null,
                "Errors": null,
                "Index": 1
            
            },
            // Timestamp
            {
                "Name": "Timestamp",
                "HasStorage": true,
                "Storage": {
                    "Prefix": "Timestamp",
                    "Items": [
                        {
                            "Name": "Now",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "T::Moment",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAAAAAAA=",
                            "Documentation": [
                                " Current time for the current block."
                            
                            ]
                        
                        },
                        {
                            "Name": "DidUpdate",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "bool",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Did the timestamp get updated in this block?"
                            
                            ]
                        
                        }
                    
                    ]
                
                },
                "HasCalls": true,
                "Calls": [
                    {
                        "Name": "set",
                        "Args": [
                            {
                                "Name": "now",
                                "Type": "Compact\u003cT::Moment\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Set the current time.",
                            "",
                            " This call should be invoked exactly once per block. It will panic at the finalization",
                            " phase, if this call hasn't been invoked by that time.",
                            "",
                            " The timestamp should be greater than the previous one by the amount specified by",
                            " `MinimumPeriod`.",
                            "",
                            " The dispatch origin for this call must be `Inherent`.",
                            "",
                            " # \u003cweight\u003e",
                            " - `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                            " - 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in `on_finalize`)",
                            " - 1 event handler `on_timestamp_set`. Must be `O(1)`.",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    }
                
                ],
                "HasEvents": false,
                "Events": null,
                "Constants": [
                    {
                        "Name": "MinimumPeriod",
                        "Type": "T::Moment",
                        "Value": "iBMAAAAAAAA=",
                        "Documentation": [
                            " The minimum period between blocks. Beware that this is different to the *expected* period",
                            " that the block production apparatus provides. Your chosen consensus system will generally",
                            " work with this to determine a sensible block time. e.g. For Aura, it will be double this",
                            " period on default settings."
                        
                        ]
                    
                    }
                
                ],
                "Errors": null,
                "Index": 2
            
            },
            // Sudo
            {
                "Name": "Sudo",
                "HasStorage": true,
                "Storage": {
                    "Prefix": "Sudo",
                    "Items": [
                        {
                            "Name": "Key",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "T::AccountId",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
                            "Documentation": [
                                " The `AccountId` of the sudo key."
                            
                            ]
                        
                        }
                    
                    ]
                
                },
                "HasCalls": true,
                "Calls": [
                    {
                        "Name": "sudo",
                        "Args": [
                            {
                                "Name": "call",
                                "Type": "Box\u003c\u003cT as Config\u003e::Call\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Authenticates the sudo key and dispatches a function call with `Root` origin.",
                            "",
                            " The dispatch origin for this call must be _Signed_.",
                            "",
                            " # \u003cweight\u003e",
                            " - O(1).",
                            " - Limited storage reads.",
                            " - One DB write (event).",
                            " - Weight of derivative `call` execution + 10,000.",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "sudo_unchecked_weight",
                        "Args": [
                            {
                                "Name": "call",
                                "Type": "Box\u003c\u003cT as Config\u003e::Call\u003e"
                            
                            },
                            {
                                "Name": "_weight",
                                "Type": "Weight"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Authenticates the sudo key and dispatches a function call with `Root` origin.",
                            " This function does not check the weight of the call, and instead allows the",
                            " Sudo user to specify the weight of the call.",
                            "",
                            " The dispatch origin for this call must be _Signed_.",
                            "",
                            " # \u003cweight\u003e",
                            " - O(1).",
                            " - The weight of this call is defined by the caller.",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "set_key",
                        "Args": [
                            {
                                "Name": "new",
                                "Type": "\u003cT::Lookup as StaticLookup\u003e::Source"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo key.",
                            "",
                            " The dispatch origin for this call must be _Signed_.",
                            "",
                            " # \u003cweight\u003e",
                            " - O(1).",
                            " - Limited storage reads.",
                            " - One DB change.",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "sudo_as",
                        "Args": [
                            {
                                "Name": "who",
                                "Type": "\u003cT::Lookup as StaticLookup\u003e::Source"
                            
                            },
                            {
                                "Name": "call",
                                "Type": "Box\u003c\u003cT as Config\u003e::Call\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                            " a given account.",
                            "",
                            " The dispatch origin for this call must be _Signed_.",
                            "",
                            " # \u003cweight\u003e",
                            " - O(1).",
                            " - Limited storage reads.",
                            " - One DB write (event).",
                            " - Weight of derivative `call` execution + 10,000.",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    }
                
                ],
                "HasEvents": true,
                "Events": [
                    {
                        "Name": "Sudid",
                        "Args": [
                            "DispatchResult"
                        
                        ],
                        "Documentation": [
                            " A sudo just took place. \\[result\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "KeyChanged",
                        "Args": [
                            "AccountId"
                        
                        ],
                        "Documentation": [
                            " The \\[sudoer\\] just switched identity; the old key is supplied."
                        
                        ]
                    
                    },
                    {
                        "Name": "SudoAsDone",
                        "Args": [
                            "DispatchResult"
                        
                        ],
                        "Documentation": [
                            " A sudo just took place. \\[result\\]"
                        
                        ]
                    
                    }
                
                ],
                "Constants": null,
                "Errors": [
                    {
                        "Name": "RequireSudo",
                        "Documentation": [
                            " Sender must be the Sudo account"
                        
                        ]
                    
                    }
                
                ],
                "Index": 3
            
            },
            // Scheduler
            {
                "Name": "Scheduler",
                "HasStorage": true,
                "Storage": {
                    "Prefix": "Scheduler",
                    "Items": [
                        {
                            "Name": "Agenda",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "T::BlockNumber",
                                    "Value": "Vec\u003cOption\u003cScheduled\u003c\u003cT as Config\u003e::Call, T::BlockNumber, T::\nPalletsOrigin, T::AccountId\u003e\u003e\u003e",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Items to be executed, indexed by the block number that they should be executed on."
                            
                            ]
                        
                        },
                        {
                            "Name": "Lookup",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "Vec\u003cu8\u003e",
                                    "Value": "TaskAddress\u003cT::BlockNumber\u003e",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Lookup from identity to the block number and index of the task."
                            
                            ]
                        
                        },
                        {
                            "Name": "StorageVersion",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "Releases",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Storage version of the pallet.",
                                "",
                                " New networks start with last version."
                            
                            ]
                        
                        }
                    
                    ]
                
                },
                "HasCalls": true,
                "Calls": [
                    {
                        "Name": "schedule",
                        "Args": [
                            {
                                "Name": "when",
                                "Type": "T::BlockNumber"
                            
                            },
                            {
                                "Name": "maybe_periodic",
                                "Type": "Option\u003cschedule::Period\u003cT::BlockNumber\u003e\u003e"
                            
                            },
                            {
                                "Name": "priority",
                                "Type": "schedule::Priority"
                            
                            },
                            {
                                "Name": "call",
                                "Type": "Box\u003c\u003cT as Config\u003e::Call\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Anonymously schedule a task.",
                            "",
                            " # \u003cweight\u003e",
                            " - S = Number of already scheduled calls",
                            " - Base Weight: 22.29 + .126 * S µs",
                            " - DB Weight:",
                            "     - Read: Agenda",
                            "     - Write: Agenda",
                            " - Will use base weight of 25 which should be good for up to 30 scheduled calls",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "cancel",
                        "Args": [
                            {
                                "Name": "when",
                                "Type": "T::BlockNumber"
                            
                            },
                            {
                                "Name": "index",
                                "Type": "u32"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Cancel an anonymously scheduled task.",
                            "",
                            " # \u003cweight\u003e",
                            " - S = Number of already scheduled calls",
                            " - Base Weight: 22.15 + 2.869 * S µs",
                            " - DB Weight:",
                            "     - Read: Agenda",
                            "     - Write: Agenda, Lookup",
                            " - Will use base weight of 100 which should be good for up to 30 scheduled calls",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "schedule_named",
                        "Args": [
                            {
                                "Name": "id",
                                "Type": "Vec\u003cu8\u003e"
                            
                            },
                            {
                                "Name": "when",
                                "Type": "T::BlockNumber"
                            
                            },
                            {
                                "Name": "maybe_periodic",
                                "Type": "Option\u003cschedule::Period\u003cT::BlockNumber\u003e\u003e"
                            
                            },
                            {
                                "Name": "priority",
                                "Type": "schedule::Priority"
                            
                            },
                            {
                                "Name": "call",
                                "Type": "Box\u003c\u003cT as Config\u003e::Call\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Schedule a named task.",
                            "",
                            " # \u003cweight\u003e",
                            " - S = Number of already scheduled calls",
                            " - Base Weight: 29.6 + .159 * S µs",
                            " - DB Weight:",
                            "     - Read: Agenda, Lookup",
                            "     - Write: Agenda, Lookup",
                            " - Will use base weight of 35 which should be good for more than 30 scheduled calls",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "cancel_named",
                        "Args": [
                            {
                                "Name": "id",
                                "Type": "Vec\u003cu8\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Cancel a named scheduled task.",
                            "",
                            " # \u003cweight\u003e",
                            " - S = Number of already scheduled calls",
                            " - Base Weight: 24.91 + 2.907 * S µs",
                            " - DB Weight:",
                            "     - Read: Agenda, Lookup",
                            "     - Write: Agenda, Lookup",
                            " - Will use base weight of 100 which should be good for up to 30 scheduled calls",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "schedule_after",
                        "Args": [
                            {
                                "Name": "after",
                                "Type": "T::BlockNumber"
                            
                            },
                            {
                                "Name": "maybe_periodic",
                                "Type": "Option\u003cschedule::Period\u003cT::BlockNumber\u003e\u003e"
                            
                            },
                            {
                                "Name": "priority",
                                "Type": "schedule::Priority"
                            
                            },
                            {
                                "Name": "call",
                                "Type": "Box\u003c\u003cT as Config\u003e::Call\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Anonymously schedule a task after a delay.",
                            "",
                            " # \u003cweight\u003e",
                            " Same as [`schedule`].",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "schedule_named_after",
                        "Args": [
                            {
                                "Name": "id",
                                "Type": "Vec\u003cu8\u003e"
                            
                            },
                            {
                                "Name": "after",
                                "Type": "T::BlockNumber"
                            
                            },
                            {
                                "Name": "maybe_periodic",
                                "Type": "Option\u003cschedule::Period\u003cT::BlockNumber\u003e\u003e"
                            
                            },
                            {
                                "Name": "priority",
                                "Type": "schedule::Priority"
                            
                            },
                            {
                                "Name": "call",
                                "Type": "Box\u003c\u003cT as Config\u003e::Call\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Schedule a named task after a delay.",
                            "",
                            " # \u003cweight\u003e",
                            " Same as [`schedule_named`](Self::schedule_named).",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    }
                
                ],
                "HasEvents": true,
                "Events": [
                    {
                        "Name": "Scheduled",
                        "Args": [
                            "BlockNumber",
                            "u32"
                        
                        ],
                        "Documentation": [
                            " Scheduled some task. \\[when, index\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "Canceled",
                        "Args": [
                            "BlockNumber",
                            "u32"
                        
                        ],
                        "Documentation": [
                            " Canceled some task. \\[when, index\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "Dispatched",
                        "Args": [
                            "TaskAddress\u003cBlockNumber\u003e",
                            "Option\u003cVec\u003cu8\u003e\u003e",
                            "DispatchResult"
                        
                        ],
                        "Documentation": [
                            " Dispatched some task. \\[task, id, result\\]"
                        
                        ]
                    
                    }
                
                ],
                "Constants": [
                    {
                        "Name": "MaximumWeight",
                        "Type": "Weight",
                        "Value": "ANDtkC4AAAA=",
                        "Documentation": [
                            " The maximum weight that may be scheduled per block for any dispatchables of less priority",
                            " than `schedule::HARD_DEADLINE`."
                        
                        ]
                    
                    },
                    {
                        "Name": "MaxScheduledPerBlock",
                        "Type": "u32",
                        "Value": "MgAAAA==",
                        "Documentation": [
                            " The maximum number of scheduled calls in the queue for a single block.",
                            " Not strictly enforced, but used for weight estimation."
                        
                        ]
                    
                    }
                
                ],
                "Errors": [
                    {
                        "Name": "FailedToSchedule",
                        "Documentation": [
                            " Failed to schedule a call"
                        
                        ]
                    
                    },
                    {
                        "Name": "NotFound",
                        "Documentation": [
                            " Cannot find the scheduled call."
                        
                        ]
                    
                    },
                    {
                        "Name": "TargetBlockNumberInPast",
                        "Documentation": [
                            " Given target block number is in the past."
                        
                        ]
                    
                    },
                    {
                        "Name": "RescheduleNoChange",
                        "Documentation": [
                            " Reschedule failed because it does not change scheduled time."
                        
                        ]
                    
                    }
                
                ],
                "Index": 4
            
            },
            // Indices
            {
                "Name": "Indices",
                "HasStorage": true,
                "Storage": {
                    "Prefix": "Indices",
                    "Items": [
                        {
                            "Name": "Accounts",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": true,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "T::AccountIndex",
                                    "Value": "(T::AccountId, BalanceOf\u003cT\u003e, bool)",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " The lookup from index to account."
                            
                            ]
                        
                        }
                    
                    ]
                
                },
                "HasCalls": true,
                "Calls": [
                    {
                        "Name": "claim",
                        "Args": [
                            {
                                "Name": "index",
                                "Type": "T::AccountIndex"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Assign an previously unassigned index.",
                            "",
                            " Payment: `Deposit` is reserved from the sender account.",
                            "",
                            " The dispatch origin for this call must be _Signed_.",
                            "",
                            " - `index`: the index to be claimed. This must not be in use.",
                            "",
                            " Emits `IndexAssigned` if successful.",
                            "",
                            " # \u003cweight\u003e",
                            " - `O(1)`.",
                            " - One storage mutation (codec `O(1)`).",
                            " - One reserve operation.",
                            " - One event.",
                            " -------------------",
                            " - DB Weight: 1 Read/Write (Accounts)",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "transfer",
                        "Args": [
                            {
                                "Name": "new",
                                "Type": "T::AccountId"
                            
                            },
                            {
                                "Name": "index",
                                "Type": "T::AccountIndex"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Assign an index already owned by the sender to another account. The balance reservation",
                            " is effectively transferred to the new account.",
                            "",
                            " The dispatch origin for this call must be _Signed_.",
                            "",
                            " - `index`: the index to be re-assigned. This must be owned by the sender.",
                            " - `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
                            "",
                            " Emits `IndexAssigned` if successful.",
                            "",
                            " # \u003cweight\u003e",
                            " - `O(1)`.",
                            " - One storage mutation (codec `O(1)`).",
                            " - One transfer operation.",
                            " - One event.",
                            " -------------------",
                            " - DB Weight:",
                            "    - Reads: Indices Accounts, System Account (recipient)",
                            "    - Writes: Indices Accounts, System Account (recipient)",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "free",
                        "Args": [
                            {
                                "Name": "index",
                                "Type": "T::AccountIndex"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Free up an index owned by the sender.",
                            "",
                            " Payment: Any previous deposit placed for the index is unreserved in the sender account.",
                            "",
                            " The dispatch origin for this call must be _Signed_ and the sender must own the index.",
                            "",
                            " - `index`: the index to be freed. This must be owned by the sender.",
                            "",
                            " Emits `IndexFreed` if successful.",
                            "",
                            " # \u003cweight\u003e",
                            " - `O(1)`.",
                            " - One storage mutation (codec `O(1)`).",
                            " - One reserve operation.",
                            " - One event.",
                            " -------------------",
                            " - DB Weight: 1 Read/Write (Accounts)",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "force_transfer",
                        "Args": [
                            {
                                "Name": "new",
                                "Type": "T::AccountId"
                            
                            },
                            {
                                "Name": "index",
                                "Type": "T::AccountIndex"
                            
                            },
                            {
                                "Name": "freeze",
                                "Type": "bool"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Force an index to an account. This doesn't require a deposit. If the index is already",
                            " held, then any deposit is reimbursed to its current owner.",
                            "",
                            " The dispatch origin for this call must be _Root_.",
                            "",
                            " - `index`: the index to be (re-)assigned.",
                            " - `new`: the new owner of the index. This function is a no-op if it is equal to sender.",
                            " - `freeze`: if set to `true`, will freeze the index so it cannot be transferred.",
                            "",
                            " Emits `IndexAssigned` if successful.",
                            "",
                            " # \u003cweight\u003e",
                            " - `O(1)`.",
                            " - One storage mutation (codec `O(1)`).",
                            " - Up to one reserve operation.",
                            " - One event.",
                            " -------------------",
                            " - DB Weight:",
                            "    - Reads: Indices Accounts, System Account (original owner)",
                            "    - Writes: Indices Accounts, System Account (original owner)",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "freeze",
                        "Args": [
                            {
                                "Name": "index",
                                "Type": "T::AccountIndex"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Freeze an index so it will always point to the sender account. This consumes the deposit.",
                            "",
                            " The dispatch origin for this call must be _Signed_ and the signing account must have a",
                            " non-frozen account `index`.",
                            "",
                            " - `index`: the index to be frozen in place.",
                            "",
                            " Emits `IndexFrozen` if successful.",
                            "",
                            " # \u003cweight\u003e",
                            " - `O(1)`.",
                            " - One storage mutation (codec `O(1)`).",
                            " - Up to one slash operation.",
                            " - One event.",
                            " -------------------",
                            " - DB Weight: 1 Read/Write (Accounts)",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    }
                
                ],
                "HasEvents": true,
                "Events": [
                    {
                        "Name": "IndexAssigned",
                        "Args": [
                            "AccountId",
                            "AccountIndex"
                        
                        ],
                        "Documentation": [
                            " A account index was assigned. \\[index, who\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "IndexFreed",
                        "Args": [
                            "AccountIndex"
                        
                        ],
                        "Documentation": [
                            " A account index has been freed up (unassigned). \\[index\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "IndexFrozen",
                        "Args": [
                            "AccountIndex",
                            "AccountId"
                        
                        ],
                        "Documentation": [
                            " A account index has been frozen to its current account ID. \\[index, who\\]"
                        
                        ]
                    
                    }
                
                ],
                "Constants": [
                    {
                        "Name": "Deposit",
                        "Type": "BalanceOf\u003cT\u003e",
                        "Value": "AABkp7O24A0AAAAAAAAAAA==",
                        "Documentation": [
                            " The deposit needed for reserving an index."
                        
                        ]
                    
                    }
                
                ],
                "Errors": [
                    {
                        "Name": "NotAssigned",
                        "Documentation": [
                            " The index was not already assigned."
                        
                        ]
                    
                    },
                    {
                        "Name": "NotOwner",
                        "Documentation": [
                            " The index is assigned to another account."
                        
                        ]
                    
                    },
                    {
                        "Name": "InUse",
                        "Documentation": [
                            " The index was not available."
                        
                        ]
                    
                    },
                    {
                        "Name": "NotTransfer",
                        "Documentation": [
                            " The source and destination accounts are identical."
                        
                        ]
                    
                    },
                    {
                        "Name": "Permanent",
                        "Documentation": [
                            " The index is permanent and may not be freed/changed."
                        
                        ]
                    
                    }
                
                ],
                "Index": 5
            
            },
            // Balances
            {
                "Name": "Balances",
                "HasStorage": true,
                "Storage": {
                    "Prefix": "Balances",
                    "Items": [
                        {
                            "Name": "TotalIssuance",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "T::Balance",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAAAAAAAAAAAAAAAAAA==",
                            "Documentation": [
                                " The total units issued in the system."
                            
                            ]
                        
                        },
                        {
                            "Name": "Account",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": true,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "T::AccountId",
                                    "Value": "AccountData\u003cT::Balance\u003e",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==",
                            "Documentation": [
                                " The balance of an account.",
                                "",
                                " NOTE: This is only used in the case that this pallet is used to store balances."
                            
                            ]
                        
                        },
                        {
                            "Name": "Locks",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": true,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "T::AccountId",
                                    "Value": "WeakBoundedVec\u003cBalanceLock\u003cT::Balance\u003e, T::MaxLocks\u003e",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Any liquidity locks on some account balances.",
                                " NOTE: Should only be accessed when setting, changing and freeing a lock."
                            
                            ]
                        
                        },
                        {
                            "Name": "Reserves",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": true,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "T::AccountId",
                                    "Value": "BoundedVec\u003cReserveData\u003cT::ReserveIdentifier, T::Balance\u003e, T::\nMaxReserves\u003e",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Named reserves on some account balances."
                            
                            ]
                        
                        },
                        {
                            "Name": "StorageVersion",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "Releases",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Storage version of the pallet.",
                                "",
                                " This is set to v2.0.0 for new networks."
                            
                            ]
                        
                        }
                    
                    ]
                
                },
                "HasCalls": true,
                "Calls": [
                    //transfer
                    {
                        "Name": "transfer",
                        "Args": [
                            {
                                "Name": "dest",
                                "Type": "\u003cT::Lookup as StaticLookup\u003e::Source"
                            
                            },
                            {
                                "Name": "value",
                                "Type": "Compact\u003cT::Balance\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Transfer some liquid free balance to another account.",
                            "",
                            " `transfer` will set the `FreeBalance` of the sender and receiver.",
                            " It will decrease the total issuance of the system by the `TransferFee`.",
                            " If the sender's account is below the existential deposit as a result",
                            " of the transfer, the account will be reaped.",
                            "",
                            " The dispatch origin for this call must be `Signed` by the transactor.",
                            "",
                            " # \u003cweight\u003e",
                            " - Dependent on arguments but not critical, given proper implementations for",
                            "   input config types. See related functions below.",
                            " - It contains a limited number of reads and writes internally and no complex computation.",
                            "",
                            " Related functions:",
                            "",
                            "   - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                            "   - Transferring balances to accounts that did not exist before will cause",
                            "      `T::OnNewAccount::on_new_account` to be called.",
                            "   - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
                            "   - `transfer_keep_alive` works the same way as `transfer`, but has an additional",
                            "     check that the transfer will not kill the origin account.",
                            " ---------------------------------",
                            " - Base Weight: 73.64 µs, worst case scenario (account created, account removed)",
                            " - DB Weight: 1 Read and 1 Write to destination account",
                            " - Origin account is already in memory, so no DB operations for them.",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    //set_balance
                    {
                        "Name": "set_balance",
                        "Args": [
                            {
                                "Name": "who",
                                "Type": "\u003cT::Lookup as StaticLookup\u003e::Source"
                            
                            },
                            {
                                "Name": "new_free",
                                "Type": "Compact\u003cT::Balance\u003e"
                            
                            },
                            {
                                "Name": "new_reserved",
                                "Type": "Compact\u003cT::Balance\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Set the balances of a given account.",
                            "",
                            " This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                            " also decrease the total issuance of the system (`TotalIssuance`).",
                            " If the new free or reserved balance is below the existential deposit,",
                            " it will reset the account nonce (`frame_system::AccountNonce`).",
                            "",
                            " The dispatch origin for this call is `root`.",
                            "",
                            " # \u003cweight\u003e",
                            " - Independent of the arguments.",
                            " - Contains a limited number of reads and writes.",
                            " ---------------------",
                            " - Base Weight:",
                            "     - Creating: 27.56 µs",
                            "     - Killing: 35.11 µs",
                            " - DB Weight: 1 Read, 1 Write to `who`",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    //force_transfer
                    {
                        "Name": "force_transfer",
                        "Args": [
                            {
                                "Name": "source",
                                "Type": "\u003cT::Lookup as StaticLookup\u003e::Source"
                            
                            },
                            {
                                "Name": "dest",
                                "Type": "\u003cT::Lookup as StaticLookup\u003e::Source"
                            
                            },
                            {
                                "Name": "value",
                                "Type": "Compact\u003cT::Balance\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Exactly as `transfer`, except the origin must be root and the source account may be",
                            " specified.",
                            " # \u003cweight\u003e",
                            " - Same as transfer, but additional read and write because the source account is",
                            "   not assumed to be in the overlay.",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    // transfer_keep_alive
                    {
                        "Name": "transfer_keep_alive",
                        "Args": [
                            {
                                "Name": "dest",
                                "Type": "\u003cT::Lookup as StaticLookup\u003e::Source"
                            
                            },
                            {
                                "Name": "value",
                                "Type": "Compact\u003cT::Balance\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                            " origin account.",
                            "",
                            " 99% of the time you want [`transfer`] instead.",
                            "",
                            " [`transfer`]: struct.Pallet.html#method.transfer",
                            " # \u003cweight\u003e",
                            " - Cheaper than transfer because account cannot be killed.",
                            " - Base Weight: 51.4 µs",
                            " - DB Weight: 1 Read and 1 Write to dest (sender is in overlay already)",
                            " #\u003c/weight\u003e"
                        
                        ]
                    
                    },
                    // transfer_all
                    {
                        "Name": "transfer_all",
                        "Args": [
                            {
                                "Name": "dest",
                                "Type": "\u003cT::Lookup as StaticLookup\u003e::Source"
                            
                            },
                            {
                                "Name": "keep_alive",
                                "Type": "bool"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Transfer the entire transferable balance from the caller account.",
                            "",
                            " NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                            " any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                            " transferred by this function. To ensure that this function results in a killed account,",
                            " you might need to prepare the account by removing any reference counters, storage",
                            " deposits, etc...",
                            "",
                            " The dispatch origin of this call must be Signed.",
                            "",
                            " - `dest`: The recipient of the transfer.",
                            " - `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                            "   of the funds the account has, causing the sender account to be killed (false), or",
                            "   transfer everything except at least the existential deposit, which will guarantee to",
                            "   keep the sender account alive (true).",
                            "   # \u003cweight\u003e",
                            " - O(1). Just like transfer, but reading the user's transferable balance first.",
                            "   #\u003c/weight\u003e"
                        
                        ]
                    
                    }
                
                ],
                "HasEvents": true,
                "Events": [
                    {
                        "Name": "Endowed",
                        "Args": [
                            "AccountId",
                            "Balance"
                        
                        ],
                        "Documentation": [
                            " An account was created with some free balance. \\[account, free_balance\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "DustLost",
                        "Args": [
                            "AccountId",
                            "Balance"
                        
                        ],
                        "Documentation": [
                            " An account was removed whose balance was non-zero but below ExistentialDeposit,",
                            " resulting in an outright loss. \\[account, balance\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "Transfer",
                        "Args": [
                            "AccountId",
                            "AccountId",
                            "Balance"
                        
                        ],
                        "Documentation": [
                            " Transfer succeeded. \\[from, to, value\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "BalanceSet",
                        "Args": [
                            "AccountId",
                            "Balance",
                            "Balance"
                        
                        ],
                        "Documentation": [
                            " A balance was set by root. \\[who, free, reserved\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "Deposit",
                        "Args": [
                            "AccountId",
                            "Balance"
                        
                        ],
                        "Documentation": [
                            " Some amount was deposited (e.g. for transaction fees). \\[who, deposit\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "Reserved",
                        "Args": [
                            "AccountId",
                            "Balance"
                        
                        ],
                        "Documentation": [
                            " Some balance was reserved (moved from free to reserved). \\[who, value\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "Unreserved",
                        "Args": [
                            "AccountId",
                            "Balance"
                        
                        ],
                        "Documentation": [
                            " Some balance was unreserved (moved from reserved to free). \\[who, value\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "ReserveRepatriated",
                        "Args": [
                            "AccountId",
                            "AccountId",
                            "Balance",
                            "Status"
                        
                        ],
                        "Documentation": [
                            " Some balance was moved from the reserve of the first account to the second account.",
                            " Final argument indicates the destination balance type.",
                            " \\[from, to, balance, destination_status\\]"
                        
                        ]
                    
                    }
                
                ],
                "Constants": [
                    {
                        "Name": "ExistentialDeposit",
                        "Type": "T::Balance",
                        "Value": "AABkp7O24A0AAAAAAAAAAA==",
                        "Documentation": [
                            " The minimum amount required to keep an account open."
                        
                        ]
                    
                    },
                    {
                        "Name": "MaxLocks",
                        "Type": "u32",
                        "Value": "MgAAAA==",
                        "Documentation": [
                            " The maximum number of locks that should exist on an account.",
                            " Not strictly enforced, but used for weight estimation."
                        
                        ]
                    
                    },
                    {
                        "Name": "MaxReserves",
                        "Type": "u32",
                        "Value": "MgAAAA==",
                        "Documentation": [
                            " The maximum number of named reserves that can exist on an account."
                        
                        ]
                    
                    }
                
                ],
                "Errors": [
                    {
                        "Name": "VestingBalance",
                        "Documentation": [
                            " Vesting balance too high to send value"
                        
                        ]
                    
                    },
                    {
                        "Name": "LiquidityRestrictions",
                        "Documentation": [
                            " Account liquidity restrictions prevent withdrawal"
                        
                        ]
                    
                    },
                    {
                        "Name": "InsufficientBalance",
                        "Documentation": [
                            " Balance too low to send value"
                        
                        ]
                    
                    },
                    {
                        "Name": "ExistentialDeposit",
                        "Documentation": [
                            " Value too low to create account due to existential deposit"
                        
                        ]
                    
                    },
                    {
                        "Name": "KeepAlive",
                        "Documentation": [
                            " Transfer/payment would kill account"
                        
                        ]
                    
                    },
                    {
                        "Name": "ExistingVestingSchedule",
                        "Documentation": [
                            " A vesting schedule already exists for this account"
                        
                        ]
                    
                    },
                    {
                        "Name": "DeadAccount",
                        "Documentation": [
                            " Beneficiary account must pre-exist"
                        
                        ]
                    
                    },
                    {
                        "Name": "TooManyReserves",
                        "Documentation": [
                            " Number of named reserves exceed MaxReserves"
                        
                        ]
                    
                    }
                
                ],
                "Index": 6
            
            },
            // Currencies
            {
                "Name": "Currencies",
                "HasStorage": false,
                "Storage": {
                    "Prefix": "",
                    "Items": null
                
                },
                "HasCalls": true,
                "Calls": [
                    {
                        "Name": "transfer",
                        "Args": [
                            {
                                "Name": "dest",
                                "Type": "\u003cT::Lookup as StaticLookup\u003e::Source"
                            
                            },
                            {
                                "Name": "currency_id",
                                "Type": "CurrencyIdOf\u003cT\u003e"
                            
                            },
                            {
                                "Name": "amount",
                                "Type": "Compact\u003cBalanceOf\u003cT\u003e\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Transfer some balance to another account under `currency_id`.",
                            "",
                            " The dispatch origin for this call must be `Signed` by the",
                            " transactor."
                        
                        ]
                    
                    },
                    {
                        "Name": "transfer_native_currency",
                        "Args": [
                            {
                                "Name": "dest",
                                "Type": "\u003cT::Lookup as StaticLookup\u003e::Source"
                            
                            },
                            {
                                "Name": "amount",
                                "Type": "Compact\u003cBalanceOf\u003cT\u003e\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Transfer some native currency to another account.",
                            "",
                            " The dispatch origin for this call must be `Signed` by the",
                            " transactor."
                        
                        ]
                    
                    },
                    {
                        "Name": "update_balance",
                        "Args": [
                            {
                                "Name": "who",
                                "Type": "\u003cT::Lookup as StaticLookup\u003e::Source"
                            
                            },
                            {
                                "Name": "currency_id",
                                "Type": "CurrencyIdOf\u003cT\u003e"
                            
                            },
                            {
                                "Name": "amount",
                                "Type": "AmountOf\u003cT\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " update amount of account `who` under `currency_id`.",
                            "",
                            " The dispatch origin of this call must be _Root_."
                        
                        ]
                    
                    }
                
                ],
                "HasEvents": true,
                "Events": [
                    {
                        "Name": "Transferred",
                        "Args": [
                            "CurrencyIdOf\u003cT\u003e",
                            "T::AccountId",
                            "T::AccountId",
                            "BalanceOf\u003cT\u003e"
                        
                        ],
                        "Documentation": [
                            " Currency transfer success. [currency_id, from, to, amount]"
                        
                        ]
                    
                    },
                    {
                        "Name": "BalanceUpdated",
                        "Args": [
                            "CurrencyIdOf\u003cT\u003e",
                            "T::AccountId",
                            "AmountOf\u003cT\u003e"
                        
                        ],
                        "Documentation": [
                            " Update balance success. [currency_id, who, amount]"
                        
                        ]
                    
                    },
                    {
                        "Name": "Deposited",
                        "Args": [
                            "CurrencyIdOf\u003cT\u003e",
                            "T::AccountId",
                            "BalanceOf\u003cT\u003e"
                        
                        ],
                        "Documentation": [
                            " Deposit success. [currency_id, who, amount]"
                        
                        ]
                    
                    },
                    {
                        "Name": "Withdrawn",
                        "Args": [
                            "CurrencyIdOf\u003cT\u003e",
                            "T::AccountId",
                            "BalanceOf\u003cT\u003e"
                        
                        ],
                        "Documentation": [
                            " Withdraw success. [currency_id, who, amount]"
                        
                        ]
                    
                    }
                
                ],
                "Constants": null,
                "Errors": [
                    {
                        "Name": "AmountIntoBalanceFailed",
                        "Documentation": [
                            " Unable to convert the Amount type into Balance."
                        
                        ]
                    
                    },
                    {
                        "Name": "BalanceTooLow",
                        "Documentation": [
                            " Balance is too low."
                        
                        ]
                    
                    },
                    {
                        "Name": "ERC20InvalidOperation",
                        "Documentation": [
                            " ERC20 invalid operation"
                        
                        ]
                    
                    },
                    {
                        "Name": "EvmAccountNotFound",
                        "Documentation": [
                            " EVM account not found"
                        
                        ]
                    
                    }
                
                ],
                "Index": 7
            
            },
            // Tokens
            {
                "Name": "Tokens",
                "HasStorage": true,
                "Storage": {
                    "Prefix": "Tokens",
                    "Items": [
                        {
                            "Name": "TotalIssuance",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "T::CurrencyId",
                                    "Value": "T::Balance",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAAAAAAAAAAAAAAAAAA==",
                            "Documentation": [
                                " The total issuance of a token type."
                            
                            ]
                        
                        },
                        {
                            "Name": "Locks",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": true,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": true,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "T::AccountId",
                                    "Key2": "T::CurrencyId",
                                    "Value": "BoundedVec\u003cBalanceLock\u003cT::Balance\u003e, T::MaxLocks\u003e",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Any liquidity locks of a token type under an account.",
                                " NOTE: Should only be accessed when setting, changing and freeing a lock."
                            
                            ]
                        
                        },
                        {
                            "Name": "Accounts",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": true,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": true,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "T::AccountId",
                                    "Key2": "T::CurrencyId",
                                    "Value": "AccountData\u003cT::Balance\u003e",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
                            "Documentation": [
                                " The balance of a token type under an account.",
                                "",
                                " NOTE: If the total is ever zero, decrease account ref account.",
                                "",
                                " NOTE: This is only used in the case that this module is used to store",
                                " balances."
                            
                            ]
                        
                        }
                    
                    ]
                
                },
                "HasCalls": false,
                "Calls": null,
                "HasEvents": true,
                "Events": [
                    {
                        "Name": "Endowed",
                        "Args": [
                            "CurrencyId",
                            "AccountId",
                            "Balance"
                        
                        ],
                        "Documentation": [
                            " An account was created with some free balance. \\[currency_id,",
                            " account, free_balance\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "DustLost",
                        "Args": [
                            "CurrencyId",
                            "AccountId",
                            "Balance"
                        
                        ],
                        "Documentation": [
                            " An account was removed whose balance was non-zero but below",
                            " ExistentialDeposit, resulting in an outright loss. \\[currency_id,",
                            " account, balance\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "Transfer",
                        "Args": [
                            "CurrencyId",
                            "AccountId",
                            "AccountId",
                            "Balance"
                        
                        ],
                        "Documentation": [
                            " Transfer succeeded. \\[currency_id, from, to, value\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "Reserved",
                        "Args": [
                            "CurrencyId",
                            "AccountId",
                            "Balance"
                        
                        ],
                        "Documentation": [
                            " Some balance was reserved (moved from free to reserved).",
                            " \\[currency_id, who, value\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "Unreserved",
                        "Args": [
                            "CurrencyId",
                            "AccountId",
                            "Balance"
                        
                        ],
                        "Documentation": [
                            " Some balance was unreserved (moved from reserved to free).",
                            " \\[currency_id, who, value\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "BalanceSet",
                        "Args": [
                            "CurrencyId",
                            "AccountId",
                            "Balance",
                            "Balance"
                        
                        ],
                        "Documentation": [
                            " A balance was set by root. \\[who, free, reserved\\]"
                        
                        ]
                    
                    }
                
                ],
                "Constants": [
                    {
                        "Name": "MaxLocks",
                        "Type": "u32",
                        "Value": "MgAAAA==",
                        "Documentation": null
                    
                    }
                
                ],
                "Errors": [
                    {
                        "Name": "BalanceTooLow",
                        "Documentation": [
                            " The balance is too low"
                        
                        ]
                    
                    },
                    {
                        "Name": "AmountIntoBalanceFailed",
                        "Documentation": [
                            " Cannot convert Amount into Balance type"
                        
                        ]
                    
                    },
                    {
                        "Name": "LiquidityRestrictions",
                        "Documentation": [
                            " Failed because liquidity restrictions due to locking"
                        
                        ]
                    
                    },
                    {
                        "Name": "MaxLocksExceeded",
                        "Documentation": [
                            " Failed because the maximum locks was exceeded"
                        
                        ]
                    
                    },
                    {
                        "Name": "KeepAlive",
                        "Documentation": [
                            " Transfer/payment would kill account"
                        
                        ]
                    
                    },
                    {
                        "Name": "ExistentialDeposit",
                        "Documentation": [
                            " Value too low to create account due to existential deposit"
                        
                        ]
                    
                    },
                    {
                        "Name": "DeadAccount",
                        "Documentation": [
                            " Beneficiary account must pre-exist"
                        
                        ]
                    
                    }
                
                ],
                "Index": 8
            
            },
            // TransactionPayment
            {
                "Name": "TransactionPayment",
                "HasStorage": true,
                "Storage": {
                    "Prefix": "TransactionPayment",
                    "Items": [
                        {
                            "Name": "NextFeeMultiplier",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "Multiplier",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AABkp7O24A0AAAAAAAAAAA==",
                            "Documentation": null
                        
                        },
                        {
                            "Name": "DefaultFeeCurrencyId",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "T::AccountId",
                                    "Value": "CurrencyId",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": null
                        
                        }
                    
                    ]
                
                },
                "HasCalls": true,
                "Calls": [
                    {
                        "Name": "set_default_fee_token",
                        "Args": [
                            {
                                "Name": "fee_token",
                                "Type": "Option\u003cCurrencyId\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Set default fee token"
                        
                        ]
                    
                    }
                
                ],
                "HasEvents": false,
                "Events": null,
                "Constants": [
                    {
                        "Name": "AllNonNativeCurrencyIds",
                        "Type": "Vec\u003cCurrencyId\u003e",
                        "Value": "AA==",
                        "Documentation": [
                            " All non-native currency ids in Reef."
                        
                        ]
                    
                    },
                    {
                        "Name": "NativeCurrencyId",
                        "Type": "CurrencyId",
                        "Value": "AAA=",
                        "Documentation": [
                            " Native currency id, the actual received currency type as fee for",
                            " treasury. Should be REEF"
                        
                        ]
                    
                    },
                    {
                        "Name": "StableCurrencyId",
                        "Type": "CurrencyId",
                        "Value": "AAE=",
                        "Documentation": [
                            " Stable currency id, should be RUSD"
                        
                        ]
                    
                    },
                    {
                        "Name": "TransactionByteFee",
                        "Type": "PalletBalanceOf\u003cT\u003e",
                        "Value": "AADBb/KGIwAAAAAAAAAAAA==",
                        "Documentation": [
                            " The fee to be paid for making a transaction; the per-byte portion."
                        
                        ]
                    
                    }
                
                ],
                "Errors": null,
                "Index": 9
            
            },
            // Authority
            {
                "Name": "Authority",
                "HasStorage": false,
                "Storage": {
                    "Prefix": "",
                    "Items": null
                
                },
                "HasCalls": true,
                "Calls": [
                    {
                        "Name": "dispatch_as",
                        "Args": [
                            {
                                "Name": "as_origin",
                                "Type": "T::AsOriginId"
                            
                            },
                            {
                                "Name": "call",
                                "Type": "Box\u003cCallOf\u003cT\u003e\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Dispatch a dispatchable on behalf of other origin"
                        
                        ]
                    
                    },
                    {
                        "Name": "schedule_dispatch",
                        "Args": [
                            {
                                "Name": "when",
                                "Type": "DispatchTime\u003cT::BlockNumber\u003e"
                            
                            },
                            {
                                "Name": "priority",
                                "Type": "Priority"
                            
                            },
                            {
                                "Name": "with_delayed_origin",
                                "Type": "bool"
                            
                            },
                            {
                                "Name": "call",
                                "Type": "Box\u003cCallOf\u003cT\u003e\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Schedule a dispatchable to be dispatched at later block.",
                            " This is the only way to dispatch a call with `DelayedOrigin`."
                        
                        ]
                    
                    },
                    {
                        "Name": "fast_track_scheduled_dispatch",
                        "Args": [
                            {
                                "Name": "initial_origin",
                                "Type": "Box\u003cT::PalletsOrigin\u003e"
                            
                            },
                            {
                                "Name": "task_id",
                                "Type": "ScheduleTaskIndex"
                            
                            },
                            {
                                "Name": "when",
                                "Type": "DispatchTime\u003cT::BlockNumber\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Fast track a scheduled dispatchable."
                        
                        ]
                    
                    },
                    {
                        "Name": "delay_scheduled_dispatch",
                        "Args": [
                            {
                                "Name": "initial_origin",
                                "Type": "Box\u003cT::PalletsOrigin\u003e"
                            
                            },
                            {
                                "Name": "task_id",
                                "Type": "ScheduleTaskIndex"
                            
                            },
                            {
                                "Name": "additional_delay",
                                "Type": "T::BlockNumber"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Delay a scheduled dispatchable."
                        
                        ]
                    
                    },
                    {
                        "Name": "cancel_scheduled_dispatch",
                        "Args": [
                            {
                                "Name": "initial_origin",
                                "Type": "Box\u003cT::PalletsOrigin\u003e"
                            
                            },
                            {
                                "Name": "task_id",
                                "Type": "ScheduleTaskIndex"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Cancel a scheduled dispatchable."
                        
                        ]
                    
                    },
                    {
                        "Name": "authorize_call",
                        "Args": [
                            {
                                "Name": "call",
                                "Type": "Box\u003cCallOf\u003cT\u003e\u003e"
                            
                            },
                            {
                                "Name": "caller",
                                "Type": "Option\u003cT::AccountId\u003e"
                            
                            }
                        
                        ],
                        "Documentation": null
                    
                    },
                    {
                        "Name": "remove_authorized_call",
                        "Args": [
                            {
                                "Name": "hash",
                                "Type": "T::Hash"
                            
                            }
                        
                        ],
                        "Documentation": null
                    
                    },
                    {
                        "Name": "trigger_call",
                        "Args": [
                            {
                                "Name": "hash",
                                "Type": "T::Hash"
                            
                            },
                            {
                                "Name": "call_weight_bound",
                                "Type": "Compact\u003cWeight\u003e"
                            
                            }
                        
                        ],
                        "Documentation": null
                    
                    }
                
                ],
                "HasEvents": true,
                "Events": [
                    {
                        "Name": "Dispatched",
                        "Args": [
                            "DispatchResult"
                        
                        ],
                        "Documentation": [
                            " A call is dispatched. [result]"
                        
                        ]
                    
                    },
                    {
                        "Name": "Scheduled",
                        "Args": [
                            "T::PalletsOrigin",
                            "ScheduleTaskIndex"
                        
                        ],
                        "Documentation": [
                            " A call is scheduled. [origin, index]"
                        
                        ]
                    
                    },
                    {
                        "Name": "FastTracked",
                        "Args": [
                            "T::PalletsOrigin",
                            "ScheduleTaskIndex",
                            "T::BlockNumber"
                        
                        ],
                        "Documentation": [
                            " A scheduled call is fast tracked. [origin, index, when]"
                        
                        ]
                    
                    },
                    {
                        "Name": "Delayed",
                        "Args": [
                            "T::PalletsOrigin",
                            "ScheduleTaskIndex",
                            "T::BlockNumber"
                        
                        ],
                        "Documentation": [
                            " A scheduled call is delayed. [origin, index, when]"
                        
                        ]
                    
                    },
                    {
                        "Name": "Cancelled",
                        "Args": [
                            "T::PalletsOrigin",
                            "ScheduleTaskIndex"
                        
                        ],
                        "Documentation": [
                            " A scheduled call is cancelled. [origin, index]"
                        
                        ]
                    
                    },
                    {
                        "Name": "AuthorizedCall",
                        "Args": [
                            "T::Hash",
                            "Option\u003cT::AccountId\u003e"
                        
                        ],
                        "Documentation": [
                            " A call is authorized. \\[hash, caller\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "RemovedAuthorizedCall",
                        "Args": [
                            "T::Hash"
                        
                        ],
                        "Documentation": [
                            " An authorized call was removed. \\[hash\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "TriggeredCallBy",
                        "Args": [
                            "T::Hash",
                            "T::AccountId"
                        
                        ],
                        "Documentation": [
                            " An authorized call was triggered. \\[hash, caller\\]"
                        
                        ]
                    
                    }
                
                ],
                "Constants": null,
                "Errors": [
                    {
                        "Name": "FailedToSchedule",
                        "Documentation": [
                            " Failed to schedule a task."
                        
                        ]
                    
                    },
                    {
                        "Name": "FailedToCancel",
                        "Documentation": [
                            " Failed to cancel a task."
                        
                        ]
                    
                    },
                    {
                        "Name": "FailedToFastTrack",
                        "Documentation": [
                            " Failed to fast track a task."
                        
                        ]
                    
                    },
                    {
                        "Name": "FailedToDelay",
                        "Documentation": [
                            " Failed to delay a task."
                        
                        ]
                    
                    },
                    {
                        "Name": "CallNotAuthorized",
                        "Documentation": [
                            " Call is not authorized."
                        
                        ]
                    
                    },
                    {
                        "Name": "TriggerCallNotPermitted",
                        "Documentation": [
                            " Triggering the call is not permitted."
                        
                        ]
                    
                    },
                    {
                        "Name": "WrongCallWeightBound",
                        "Documentation": [
                            " Call weight bound is wrong."
                        
                        ]
                    
                    }
                
                ],
                "Index": 10
            
            },
            // Utility
            {
                "Name": "Utility",
                "HasStorage": false,
                "Storage": {
                    "Prefix": "",
                    "Items": null
                
                },
                "HasCalls": true,
                "Calls": [
                    {
                        "Name": "batch",
                        "Args": [
                            {
                                "Name": "calls",
                                "Type": "Vec\u003c\u003cT as Config\u003e::Call\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Send a batch of dispatch calls.",
                            "",
                            " May be called from any origin.",
                            "",
                            " - `calls`: The calls to be dispatched from the same origin. The number of call must not",
                            "   exceed the constant: `batched_calls_limit` (available in constant metadata).",
                            "",
                            " If origin is root then call are dispatch without checking origin filter. (This includes",
                            " bypassing `frame_system::Config::BaseCallFilter`).",
                            "",
                            " # \u003cweight\u003e",
                            " - Complexity: O(C) where C is the number of calls to be batched.",
                            " # \u003c/weight\u003e",
                            "",
                            " This will return `Ok` in all circumstances. To determine the success of the batch, an",
                            " event is deposited. If a call failed and the batch was interrupted, then the",
                            " `BatchInterrupted` event is deposited, along with the number of successful calls made",
                            " and the error of the failed call. If all were successful, then the `BatchCompleted`",
                            " event is deposited."
                        
                        ]
                    
                    },
                    {
                        "Name": "as_derivative",
                        "Args": [
                            {
                                "Name": "index",
                                "Type": "u16"
                            
                            },
                            {
                                "Name": "call",
                                "Type": "Box\u003c\u003cT as Config\u003e::Call\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Send a call through an indexed pseudonym of the sender.",
                            "",
                            " Filter from origin are passed along. The call will be dispatched with an origin which",
                            " use the same filter as the origin of this call.",
                            "",
                            " NOTE: If you need to ensure that any account-based filtering is not honored (i.e.",
                            " because you expect `proxy` to have been used prior in the call stack and you do not want",
                            " the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`",
                            " in the Multisig pallet instead.",
                            "",
                            " NOTE: Prior to version *12, this was called `as_limited_sub`.",
                            "",
                            " The dispatch origin for this call must be _Signed_."
                        
                        ]
                    
                    },
                    {
                        "Name": "batch_all",
                        "Args": [
                            {
                                "Name": "calls",
                                "Type": "Vec\u003c\u003cT as Config\u003e::Call\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Send a batch of dispatch calls and atomically execute them.",
                            " The whole transaction will rollback and fail if any of the calls failed.",
                            "",
                            " May be called from any origin.",
                            "",
                            " - `calls`: The calls to be dispatched from the same origin. The number of call must not",
                            "   exceed the constant: `batched_calls_limit` (available in constant metadata).",
                            "",
                            " If origin is root then call are dispatch without checking origin filter. (This includes",
                            " bypassing `frame_system::Config::BaseCallFilter`).",
                            "",
                            " # \u003cweight\u003e",
                            " - Complexity: O(C) where C is the number of calls to be batched.",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    }
                
                ],
                "HasEvents": true,
                "Events": [
                    {
                        "Name": "BatchInterrupted",
                        "Args": [
                            "u32",
                            "DispatchError"
                        
                        ],
                        "Documentation": [
                            " Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                            " well as the error. \\[index, error\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "BatchCompleted",
                        "Args": null,
                        "Documentation": [
                            " Batch of dispatches completed fully with no error."
                        
                        ]
                    
                    },
                    {
                        "Name": "ItemCompleted",
                        "Args": null,
                        "Documentation": [
                            " A single item within a Batch of dispatches has completed with no error."
                        
                        ]
                    
                    }
                
                ],
                "Constants": [
                    {
                        "Name": "batched_calls_limit",
                        "Type": "u32",
                        "Value": "aC8BAA==",
                        "Documentation": [
                            " The limit on the number of batched calls."
                        
                        ]
                    
                    }
                
                ],
                "Errors": [
                    {
                        "Name": "TooManyCalls",
                        "Documentation": [
                            " Too many calls batched."
                        
                        ]
                    
                    }
                
                ],
                "Index": 11
            
            },
            // Multisig
            {
                "Name": "Multisig",
                "HasStorage": true,
                "Storage": {
                    "Prefix": "Multisig",
                    "Items": [
                        {
                            "Name": "Multisigs",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": true,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "T::AccountId",
                                    "Key2": "[u8; 32]",
                                    "Value": "Multisig\u003cT::BlockNumber, BalanceOf\u003cT\u003e, T::AccountId\u003e",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": true,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " The set of open multisig operations."
                            
                            ]
                        
                        },
                        {
                            "Name": "Calls",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": true
                                    
                                    },
                                    "Key": "[u8; 32]",
                                    "Value": "(OpaqueCall, T::AccountId, BalanceOf\u003cT\u003e)",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": null
                        
                        }
                    
                    ]
                
                },
                "HasCalls": true,
                "Calls": [
                    {
                        "Name": "as_multi_threshold_1",
                        "Args": [
                            {
                                "Name": "other_signatories",
                                "Type": "Vec\u003cT::AccountId\u003e"
                            
                            },
                            {
                                "Name": "call",
                                "Type": "Box\u003c\u003cT as Config\u003e::Call\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Immediately dispatch a multi-signature call using a single approval from the caller.",
                            "",
                            " The dispatch origin for this call must be _Signed_.",
                            "",
                            " - `other_signatories`: The accounts (other than the sender) who are part of the",
                            " multi-signature, but do not participate in the approval process.",
                            " - `call`: The call to be executed.",
                            "",
                            " Result is equivalent to the dispatched result.",
                            "",
                            " # \u003cweight\u003e",
                            " O(Z + C) where Z is the length of the call and C its execution weight.",
                            " -------------------------------",
                            " - DB Weight: None",
                            " - Plus Call Weight",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "as_multi",
                        "Args": [
                            {
                                "Name": "threshold",
                                "Type": "u16"
                            
                            },
                            {
                                "Name": "other_signatories",
                                "Type": "Vec\u003cT::AccountId\u003e"
                            
                            },
                            {
                                "Name": "maybe_timepoint",
                                "Type": "Option\u003cTimepoint\u003cT::BlockNumber\u003e\u003e"
                            
                            },
                            {
                                "Name": "call",
                                "Type": "OpaqueCall"
                            
                            },
                            {
                                "Name": "store_call",
                                "Type": "bool"
                            
                            },
                            {
                                "Name": "max_weight",
                                "Type": "Weight"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Register approval for a dispatch to be made from a deterministic composite account if",
                            " approved by a total of `threshold - 1` of `other_signatories`.",
                            "",
                            " If there are enough, then dispatch the call.",
                            "",
                            " Payment: `DepositBase` will be reserved if this is the first approval, plus",
                            " `threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                            " is cancelled.",
                            "",
                            " The dispatch origin for this call must be _Signed_.",
                            "",
                            " - `threshold`: The total number of approvals for this dispatch before it is executed.",
                            " - `other_signatories`: The accounts (other than the sender) who can approve this",
                            " dispatch. May not be empty.",
                            " - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                            " not the first approval, then it must be `Some`, with the timepoint (block number and",
                            " transaction index) of the first approval transaction.",
                            " - `call`: The call to be executed.",
                            "",
                            " NOTE: Unless this is the final approval, you will generally want to use",
                            " `approve_as_multi` instead, since it only requires a hash of the call.",
                            "",
                            " Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise",
                            " on success, result is `Ok` and the result from the interior call, if it was executed,",
                            " may be found in the deposited `MultisigExecuted` event.",
                            "",
                            " # \u003cweight\u003e",
                            " - `O(S + Z + Call)`.",
                            " - Up to one balance-reserve or unreserve operation.",
                            " - One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                            "   signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                            " - One call encode \u0026 hash, both of complexity `O(Z)` where `Z` is tx-len.",
                            " - One encode \u0026 hash, both of complexity `O(S)`.",
                            " - Up to one binary search and insert (`O(logS + S)`).",
                            " - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                            " - One event.",
                            " - The weight of the `call`.",
                            " - Storage: inserts one item, value size bounded by `MaxSignatories`, with a",
                            "   deposit taken for its lifetime of",
                            "   `DepositBase + threshold * DepositFactor`.",
                            " -------------------------------",
                            " - DB Weight:",
                            "     - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)",
                            "     - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)",
                            " - Plus Call Weight",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "approve_as_multi",
                        "Args": [
                            {
                                "Name": "threshold",
                                "Type": "u16"
                            
                            },
                            {
                                "Name": "other_signatories",
                                "Type": "Vec\u003cT::AccountId\u003e"
                            
                            },
                            {
                                "Name": "maybe_timepoint",
                                "Type": "Option\u003cTimepoint\u003cT::BlockNumber\u003e\u003e"
                            
                            },
                            {
                                "Name": "call_hash",
                                "Type": "[u8; 32]"
                            
                            },
                            {
                                "Name": "max_weight",
                                "Type": "Weight"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Register approval for a dispatch to be made from a deterministic composite account if",
                            " approved by a total of `threshold - 1` of `other_signatories`.",
                            "",
                            " Payment: `DepositBase` will be reserved if this is the first approval, plus",
                            " `threshold` times `DepositFactor`. It is returned once this dispatch happens or",
                            " is cancelled.",
                            "",
                            " The dispatch origin for this call must be _Signed_.",
                            "",
                            " - `threshold`: The total number of approvals for this dispatch before it is executed.",
                            " - `other_signatories`: The accounts (other than the sender) who can approve this",
                            " dispatch. May not be empty.",
                            " - `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is",
                            " not the first approval, then it must be `Some`, with the timepoint (block number and",
                            " transaction index) of the first approval transaction.",
                            " - `call_hash`: The hash of the call to be executed.",
                            "",
                            " NOTE: If this is the final approval, you will want to use `as_multi` instead.",
                            "",
                            " # \u003cweight\u003e",
                            " - `O(S)`.",
                            " - Up to one balance-reserve or unreserve operation.",
                            " - One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                            "   signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                            " - One encode \u0026 hash, both of complexity `O(S)`.",
                            " - Up to one binary search and insert (`O(logS + S)`).",
                            " - I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove.",
                            " - One event.",
                            " - Storage: inserts one item, value size bounded by `MaxSignatories`, with a",
                            "   deposit taken for its lifetime of",
                            "   `DepositBase + threshold * DepositFactor`.",
                            " ----------------------------------",
                            " - DB Weight:",
                            "     - Read: Multisig Storage, [Caller Account]",
                            "     - Write: Multisig Storage, [Caller Account]",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "cancel_as_multi",
                        "Args": [
                            {
                                "Name": "threshold",
                                "Type": "u16"
                            
                            },
                            {
                                "Name": "other_signatories",
                                "Type": "Vec\u003cT::AccountId\u003e"
                            
                            },
                            {
                                "Name": "timepoint",
                                "Type": "Timepoint\u003cT::BlockNumber\u003e"
                            
                            },
                            {
                                "Name": "call_hash",
                                "Type": "[u8; 32]"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously",
                            " for this operation will be unreserved on success.",
                            "",
                            " The dispatch origin for this call must be _Signed_.",
                            "",
                            " - `threshold`: The total number of approvals for this dispatch before it is executed.",
                            " - `other_signatories`: The accounts (other than the sender) who can approve this",
                            " dispatch. May not be empty.",
                            " - `timepoint`: The timepoint (block number and transaction index) of the first approval",
                            " transaction for this dispatch.",
                            " - `call_hash`: The hash of the call to be executed.",
                            "",
                            " # \u003cweight\u003e",
                            " - `O(S)`.",
                            " - Up to one balance-reserve or unreserve operation.",
                            " - One passthrough operation, one insert, both `O(S)` where `S` is the number of",
                            "   signatories. `S` is capped by `MaxSignatories`, with weight being proportional.",
                            " - One encode \u0026 hash, both of complexity `O(S)`.",
                            " - One event.",
                            " - I/O: 1 read `O(S)`, one remove.",
                            " - Storage: removes one item.",
                            " ----------------------------------",
                            " - DB Weight:",
                            "     - Read: Multisig Storage, [Caller Account], Refund Account, Calls",
                            "     - Write: Multisig Storage, [Caller Account], Refund Account, Calls",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    }
                
                ],
                "HasEvents": true,
                "Events": [
                    {
                        "Name": "NewMultisig",
                        "Args": [
                            "AccountId",
                            "AccountId",
                            "CallHash"
                        
                        ],
                        "Documentation": [
                            " A new multisig operation has begun. \\[approving, multisig, call_hash\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "MultisigApproval",
                        "Args": [
                            "AccountId",
                            "Timepoint\u003cBlockNumber\u003e",
                            "AccountId",
                            "CallHash"
                        
                        ],
                        "Documentation": [
                            " A multisig operation has been approved by someone.",
                            " \\[approving, timepoint, multisig, call_hash\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "MultisigExecuted",
                        "Args": [
                            "AccountId",
                            "Timepoint\u003cBlockNumber\u003e",
                            "AccountId",
                            "CallHash",
                            "DispatchResult"
                        
                        ],
                        "Documentation": [
                            " A multisig operation has been executed. \\[approving, timepoint, multisig, call_hash\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "MultisigCancelled",
                        "Args": [
                            "AccountId",
                            "Timepoint\u003cBlockNumber\u003e",
                            "AccountId",
                            "CallHash"
                        
                        ],
                        "Documentation": [
                            " A multisig operation has been cancelled. \\[cancelling, timepoint, multisig, call_hash\\]"
                        
                        ]
                    
                    }
                
                ],
                "Constants": [
                    {
                        "Name": "DepositBase",
                        "Type": "BalanceOf\u003cT\u003e",
                        "Value": "AAAofl+pxCEBAAAAAAAAAA==",
                        "Documentation": [
                            " The base amount of currency needed to reserve for creating a multisig execution or to store",
                            " a dispatch call for later.",
                            "",
                            " This is held for an additional storage item whose value size is",
                            " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is",
                            " `32 + sizeof(AccountId)` bytes."
                        
                        ]
                    
                    },
                    {
                        "Name": "DepositFactor",
                        "Type": "BalanceOf\u003cT\u003e",
                        "Value": "AAAg+E3ecAQAAAAAAAAAAA==",
                        "Documentation": [
                            " The amount of currency needed per unit threshold when creating a multisig execution.",
                            "",
                            " This is held for adding 32 bytes more into a pre-existing storage value."
                        
                        ]
                    
                    },
                    {
                        "Name": "MaxSignatories",
                        "Type": "u16",
                        "Value": "ZAA=",
                        "Documentation": [
                            " The maximum amount of signatories allowed in the multisig."
                        
                        ]
                    
                    }
                
                ],
                "Errors": [
                    {
                        "Name": "MinimumThreshold",
                        "Documentation": [
                            " Threshold must be 2 or greater."
                        
                        ]
                    
                    },
                    {
                        "Name": "AlreadyApproved",
                        "Documentation": [
                            " Call is already approved by this signatory."
                        
                        ]
                    
                    },
                    {
                        "Name": "NoApprovalsNeeded",
                        "Documentation": [
                            " Call doesn't need any (more) approvals."
                        
                        ]
                    
                    },
                    {
                        "Name": "TooFewSignatories",
                        "Documentation": [
                            " There are too few signatories in the list."
                        
                        ]
                    
                    },
                    {
                        "Name": "TooManySignatories",
                        "Documentation": [
                            " There are too many signatories in the list."
                        
                        ]
                    
                    },
                    {
                        "Name": "SignatoriesOutOfOrder",
                        "Documentation": [
                            " The signatories were provided out of order; they should be ordered."
                        
                        ]
                    
                    },
                    {
                        "Name": "SenderInSignatories",
                        "Documentation": [
                            " The sender was contained in the other signatories; it shouldn't be."
                        
                        ]
                    
                    },
                    {
                        "Name": "NotFound",
                        "Documentation": [
                            " Multisig operation not found when attempting to cancel."
                        
                        ]
                    
                    },
                    {
                        "Name": "NotOwner",
                        "Documentation": [
                            " Only the account that originally created the multisig is able to cancel it."
                        
                        ]
                    
                    },
                    {
                        "Name": "NoTimepoint",
                        "Documentation": [
                            " No timepoint was given, yet the multisig operation is already underway."
                        
                        ]
                    
                    },
                    {
                        "Name": "WrongTimepoint",
                        "Documentation": [
                            " A different timepoint was given to the multisig operation that is underway."
                        
                        ]
                    
                    },
                    {
                        "Name": "UnexpectedTimepoint",
                        "Documentation": [
                            " A timepoint was given, yet no multisig operation is underway."
                        
                        ]
                    
                    },
                    {
                        "Name": "MaxWeightTooLow",
                        "Documentation": [
                            " The maximum weight information provided was too low."
                        
                        ]
                    
                    },
                    {
                        "Name": "AlreadyStored",
                        "Documentation": [
                            " The data to be stored is already stored."
                        
                        ]
                    
                    }
                
                ],
                "Index": 12
            
            },
            // EvmAccounts
            {
                "Name": "EvmAccounts",
                "HasStorage": true,
                "Storage": {
                    "Prefix": "EvmAccounts",
                    "Items": [
                        {
                            "Name": "Accounts",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "EvmAddress",
                                    "Value": "T::AccountId",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": null
                        
                        },
                        {
                            "Name": "EvmAddresses",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "T::AccountId",
                                    "Value": "EvmAddress",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": null
                        
                        }
                    
                    ]
                
                },
                "HasCalls": true,
                "Calls": [
                    {
                        "Name": "claim_account",
                        "Args": [
                            {
                                "Name": "eth_address",
                                "Type": "EvmAddress"
                            
                            },
                            {
                                "Name": "eth_signature",
                                "Type": "EcdsaSignature"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Claim account mapping between Substrate accounts and EVM accounts.",
                            " Ensure eth_address has not been mapped."
                        
                        ]
                    
                    },
                    {
                        "Name": "claim_default_account",
                        "Args": null,
                        "Documentation": null
                    
                    }
                
                ],
                "HasEvents": true,
                "Events": [
                    {
                        "Name": "ClaimAccount",
                        "Args": [
                            "T::AccountId",
                            "EvmAddress"
                        
                        ],
                        "Documentation": [
                            " Mapping between Substrate accounts and EVM accounts",
                            " claim account. \\[account_id, evm_address\\]"
                        
                        ]
                    
                    }
                
                ],
                "Constants": null,
                "Errors": [
                    {
                        "Name": "AccountIdHasMapped",
                        "Documentation": [
                            " AccountId has mapped"
                        
                        ]
                    
                    },
                    {
                        "Name": "EthAddressHasMapped",
                        "Documentation": [
                            " Eth address has mapped"
                        
                        ]
                    
                    },
                    {
                        "Name": "BadSignature",
                        "Documentation": [
                            " Bad signature"
                        
                        ]
                    
                    },
                    {
                        "Name": "InvalidSignature",
                        "Documentation": [
                            " Invalid signature"
                        
                        ]
                    
                    },
                    {
                        "Name": "NonZeroRefCount",
                        "Documentation": [
                            " Account ref count is not zero"
                        
                        ]
                    
                    },
                    {
                        "Name": "StillHasActiveReserved",
                        "Documentation": [
                            " Account still has active reserved"
                        
                        ]
                    
                    },
                    {
                        "Name": "NumOverflow",
                        "Documentation": [
                            " Arithmetic calculation overflow"
                        
                        ]
                    
                    },
                    {
                        "Name": "VecInsufficientCapacity",
                        "Documentation": [
                            " Vec has insufficient capacity"
                        
                        ]
                    
                    }
                
                ],
                "Index": 20
            
            },
            // EVM
            {
                "Name": "EVM",
                "HasStorage": true,
                "Storage": {
                    "Prefix": "EVM",
                    "Items": [
                        // Accounts
                        {
                            "Name": "Accounts",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "EvmAddress",
                                    "Value": "EvmAccountInfo\u003cT\u003e",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Accounts info."
                            
                            ]
                        
                        },
                        // AccountStorages
                        {
                            "Name": "AccountStorages",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": true,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "EvmAddress",
                                    "Key2": "H256",
                                    "Value": "H256",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": true,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
                            "Documentation": null
                        
                        },
                        // Codes
                        {
                            "Name": "Codes",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": true
                                    
                                    },
                                    "Key": "H256",
                                    "Value": "Vec\u003cu8\u003e",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": null
                        
                        },
                        // CodeInfos
                        {
                            "Name": "CodeInfos",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": true
                                    
                                    },
                                    "Key": "H256",
                                    "Value": "CodeInfo",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": null
                        
                        },
                        // NetworkContractIndex
                        {
                            "Name": "NetworkContractIndex",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "u64",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAAAAAAA=",
                            "Documentation": [
                                " Next available system contract address."
                            
                            ]
                        
                        },
                        // ExtrinsicOrigin
                        {
                            "Name": "ExtrinsicOrigin",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "T::AccountId",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Extrinsics origin for the current tx."
                            
                            ]
                        
                        },
                        // QueuedEvents
                        {
                            "Name": "QueuedEvents",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "Vec\u003cEvent\u003cT\u003e\u003e",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Queued Events"
                            
                            ]
                        
                        }
                    
                    ]
                
                },
                "HasCalls": true,
                "Calls": [
                    //call
                    {
                        "Name": "call",
                        "Args": [
                            {
                                "Name": "target",
                                "Type": "EvmAddress"
                            
                            },
                            {
                                "Name": "input",
                                "Type": "Vec\u003cu8\u003e"
                            
                            },
                            {
                                "Name": "value",
                                "Type": "BalanceOf\u003cT\u003e"
                            
                            },
                            {
                                "Name": "gas_limit",
                                "Type": "u64"
                            
                            },
                            {
                                "Name": "storage_limit",
                                "Type": "u32"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Issue an EVM call operation. This is similar to a message call",
                            " transaction in Ethereum."
                        
                        ]
                    
                    },
                    // scheduled_call
                    {
                        "Name": "scheduled_call",
                        "Args": [
                            {
                                "Name": "from",
                                "Type": "EvmAddress"
                            
                            },
                            {
                                "Name": "target",
                                "Type": "EvmAddress"
                            
                            },
                            {
                                "Name": "input",
                                "Type": "Vec\u003cu8\u003e"
                            
                            },
                            {
                                "Name": "value",
                                "Type": "BalanceOf\u003cT\u003e"
                            
                            },
                            {
                                "Name": "gas_limit",
                                "Type": "u64"
                            
                            },
                            {
                                "Name": "storage_limit",
                                "Type": "u32"
                            
                            }
                        
                        ],
                        "Documentation": null
                    
                    },
                    // create
                    {
                        "Name": "create",
                        "Args": [
                            {
                                "Name": "init",
                                "Type": "Vec\u003cu8\u003e"
                            
                            },
                            {
                                "Name": "value",
                                "Type": "BalanceOf\u003cT\u003e"
                            
                            },
                            {
                                "Name": "gas_limit",
                                "Type": "u64"
                            
                            },
                            {
                                "Name": "storage_limit",
                                "Type": "u32"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Issue an EVM create operation. This is similar to a contract",
                            " creation transaction in Ethereum."
                        
                        ]
                    
                    },
                    // create2
                    {
                        "Name": "create2",
                        "Args": [
                            {
                                "Name": "init",
                                "Type": "Vec\u003cu8\u003e"
                            
                            },
                            {
                                "Name": "salt",
                                "Type": "H256"
                            
                            },
                            {
                                "Name": "value",
                                "Type": "BalanceOf\u003cT\u003e"
                            
                            },
                            {
                                "Name": "gas_limit",
                                "Type": "u64"
                            
                            },
                            {
                                "Name": "storage_limit",
                                "Type": "u32"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Issue an EVM create2 operation."
                        
                        ]
                    
                    },
                    //create_network_contract
                    {
                        "Name": "create_network_contract",
                        "Args": [
                            {
                                "Name": "init",
                                "Type": "Vec\u003cu8\u003e"
                            
                            },
                            {
                                "Name": "value",
                                "Type": "BalanceOf\u003cT\u003e"
                            
                            },
                            {
                                "Name": "gas_limit",
                                "Type": "u64"
                            
                            },
                            {
                                "Name": "storage_limit",
                                "Type": "u32"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Issue an EVM create operation. The next available system contract",
                            " address will be used as created contract address."
                        
                        ]
                    
                    },
                    // transfer_maintainer
                    {
                        "Name": "transfer_maintainer",
                        "Args": [
                            {
                                "Name": "contract",
                                "Type": "EvmAddress"
                            
                            },
                            {
                                "Name": "new_maintainer",
                                "Type": "EvmAddress"
                            
                            }
                        
                        ],
                        "Documentation": null
                    
                    },
                    // deploy
                    {
                        "Name": "deploy",
                        "Args": [
                            {
                                "Name": "contract",
                                "Type": "EvmAddress"
                            
                            }
                        
                        ],
                        "Documentation": null
                    
                    },
                    // deploy_free
                    {
                        "Name": "deploy_free",
                        "Args": [
                            {
                                "Name": "contract",
                                "Type": "EvmAddress"
                            
                            }
                        
                        ],
                        "Documentation": null
                    
                    },
                    //enable_contract_development
                    {
                        "Name": "enable_contract_development",
                        "Args": null,
                        "Documentation": null
                    
                    },
                    // disable_contract_development
                    {
                        "Name": "disable_contract_development",
                        "Args": null,
                        "Documentation": null
                    
                    },
                    // set_code
                    {
                        "Name": "set_code",
                        "Args": [
                            {
                                "Name": "contract",
                                "Type": "EvmAddress"
                            
                            },
                            {
                                "Name": "code",
                                "Type": "Vec\u003cu8\u003e"
                            
                            }
                        
                        ],
                        "Documentation": null
                    
                    },
                    //selfdestruct
                    {
                        "Name": "selfdestruct",
                        "Args": [
                            {
                                "Name": "contract",
                                "Type": "EvmAddress"
                            
                            }
                        
                        ],
                        "Documentation": null
                    
                    }
                
                ],
                "HasEvents": true,
                "Events": [
                    {
                        "Name": "Log",
                        "Args": [
                            "Log"
                        
                        ],
                        "Documentation": [
                            " Ethereum events from contracts."
                        
                        ]
                    
                    },
                    {
                        "Name": "Created",
                        "Args": [
                            "EvmAddress",
                            "EvmAddress",
                            "(u64, i32)"
                        
                        ],
                        "Documentation": [
                            " A new contract has been created. \\[maintainer, contract, (gas_used, storage_used)\\]."
                        
                        ]
                    
                    },
                    {
                        "Name": "CreatedFailed",
                        "Args": [
                            "EvmAddress",
                            "EvmAddress",
                            "ExitReason",
                            "Vec\u003cu8\u003e",
                            "(u64, i32)"
                        
                        ],
                        "Documentation": [
                            " A contract was attempted to be created, but the execution failed.",
                            " \\[maintainer, contract, exit_reason, output, (gas_used, storage_used)\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "Executed",
                        "Args": [
                            "EvmAddress",
                            "EvmAddress",
                            "(u64, i32)"
                        
                        ],
                        "Documentation": [
                            " A \\[caller, contract, (gas_used, storage_used)\\] has been executed successfully with states applied."
                        
                        ]
                    
                    },
                    {
                        "Name": "ExecutedFailed",
                        "Args": [
                            "EvmAddress",
                            "EvmAddress",
                            "ExitReason",
                            "Vec\u003cu8\u003e",
                            "(u64, i32)"
                        
                        ],
                        "Documentation": [
                            " A contract has been executed with errors. States are reverted with",
                            " only gas fees applied. \\[caller, contract, exit_reason, output, (gas_used, storage_used)\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "BalanceDeposit",
                        "Args": [
                            "T::AccountId",
                            "EvmAddress",
                            "U256"
                        
                        ],
                        "Documentation": [
                            " A deposit has been made at a given address. \\[sender, address,",
                            " value\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "BalanceWithdraw",
                        "Args": [
                            "T::AccountId",
                            "EvmAddress",
                            "U256"
                        
                        ],
                        "Documentation": [
                            " A withdrawal has been made from a given address. \\[sender, address,",
                            " value\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "AddStorageQuota",
                        "Args": [
                            "EvmAddress",
                            "u32"
                        
                        ],
                        "Documentation": [
                            " A quota has been added at a given address. \\[address, bytes\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "RemoveStorageQuota",
                        "Args": [
                            "EvmAddress",
                            "u32"
                        
                        ],
                        "Documentation": [
                            " A quota has been removed at a given address. \\[address, bytes\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "TransferredMaintainer",
                        "Args": [
                            "EvmAddress",
                            "EvmAddress"
                        
                        ],
                        "Documentation": [
                            " Transferred maintainer. \\[contract, address\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "CanceledTransferMaintainer",
                        "Args": [
                            "EvmAddress",
                            "EvmAddress"
                        
                        ],
                        "Documentation": [
                            " Canceled the transfer maintainer. \\[contract, address\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "ConfirmedTransferMaintainer",
                        "Args": [
                            "EvmAddress",
                            "EvmAddress"
                        
                        ],
                        "Documentation": [
                            " Confirmed the transfer maintainer. \\[contract, address\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "RejectedTransferMaintainer",
                        "Args": [
                            "EvmAddress",
                            "EvmAddress"
                        
                        ],
                        "Documentation": [
                            " Rejected the transfer maintainer. \\[contract, address\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "ContractDevelopmentEnabled",
                        "Args": [
                            "T::AccountId"
                        
                        ],
                        "Documentation": [
                            " Enabled contract development. \\[who\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "ContractDevelopmentDisabled",
                        "Args": [
                            "T::AccountId"
                        
                        ],
                        "Documentation": [
                            " Disabled contract development. \\[who\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "ContractDeployed",
                        "Args": [
                            "EvmAddress"
                        
                        ],
                        "Documentation": [
                            " Deployed contract. \\[contract\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "ContractSetCode",
                        "Args": [
                            "EvmAddress"
                        
                        ],
                        "Documentation": [
                            " Set contract code. \\[contract\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "ContractSelfdestructed",
                        "Args": [
                            "EvmAddress",
                            "EvmAddress"
                        
                        ],
                        "Documentation": [
                            " Selfdestructed contract code. \\[caller, contract\\]"
                        
                        ]
                    
                    }
                
                ],
                "Constants": [
                    {
                        "Name": "NewContractExtraBytes",
                        "Type": "u32",
                        "Value": "6AMAAA==",
                        "Documentation": [
                            " Charge extra bytes for creating a contract, would be reserved until",
                            " the contract deleted."
                        
                        ]
                    
                    },
                    {
                        "Name": "StorageDepositPerByte",
                        "Type": "BalanceOf\u003cT\u003e",
                        "Value": "AADBb/KGIwAAAAAAAAAAAA==",
                        "Documentation": [
                            " Storage required for per byte."
                        
                        ]
                    
                    },
                    {
                        "Name": "MaxCodeSize",
                        "Type": "u32",
                        "Value": "APAAAA==",
                        "Documentation": [
                            " Contract max code size."
                        
                        ]
                    
                    },
                    {
                        "Name": "NetworkContractSource",
                        "Type": "EvmAddress",
                        "Value": "AAAAAAAAAAAAAAAAAAAAAAAAAAA=",
                        "Documentation": [
                            " The EVM address for creating system contract."
                        
                        ]
                    
                    },
                    {
                        "Name": "DeveloperDeposit",
                        "Type": "BalanceOf\u003cT\u003e",
                        "Value": "AACg3sWtyTU2AAAAAAAAAA==",
                        "Documentation": [
                            " Deposit for the developer."
                        
                        ]
                    
                    },
                    {
                        "Name": "DeploymentFee",
                        "Type": "BalanceOf\u003cT\u003e",
                        "Value": "AAAQYy1ex2sFAAAAAAAAAA==",
                        "Documentation": [
                            " The fee for deploying the contract."
                        
                        ]
                    
                    }
                
                ],
                "Errors": [
                    {
                        "Name": "AddressNotMapped",
                        "Documentation": [
                            " Address not mapped"
                        
                        ]
                    
                    },
                    {
                        "Name": "ContractNotFound",
                        "Documentation": [
                            " Contract not found"
                        
                        ]
                    
                    },
                    {
                        "Name": "NoPermission",
                        "Documentation": [
                            " No permission"
                        
                        ]
                    
                    },
                    {
                        "Name": "NumOutOfBound",
                        "Documentation": [
                            " Number out of bound in calculation."
                        
                        ]
                    
                    },
                    {
                        "Name": "StorageExceedsStorageLimit",
                        "Documentation": [
                            " Storage exceeds max code size"
                        
                        ]
                    
                    },
                    {
                        "Name": "ContractDevelopmentNotEnabled",
                        "Documentation": [
                            " Contract development is not enabled"
                        
                        ]
                    
                    },
                    {
                        "Name": "ContractDevelopmentAlreadyEnabled",
                        "Documentation": [
                            " Contract development is already enabled"
                        
                        ]
                    
                    },
                    {
                        "Name": "ContractAlreadyDeployed",
                        "Documentation": [
                            " Contract already deployed"
                        
                        ]
                    
                    },
                    {
                        "Name": "ContractExceedsMaxCodeSize",
                        "Documentation": [
                            " Contract exceeds max code size"
                        
                        ]
                    
                    },
                    {
                        "Name": "OutOfStorage",
                        "Documentation": [
                            " Storage usage exceeds storage limit"
                        
                        ]
                    
                    },
                    {
                        "Name": "ChargeFeeFailed",
                        "Documentation": [
                            " Charge fee failed"
                        
                        ]
                    
                    },
                    {
                        "Name": "ConflictContractAddress",
                        "Documentation": [
                            " Contract address conflicts with the system contract"
                        
                        ]
                    
                    }
                
                ],
                "Index": 21
            
            },
            // EVMBridge
            {
                "Name": "EVMBridge",
                "HasStorage": false,
                "Storage": {
                    "Prefix": "",
                    "Items": null
                
                },
                "HasCalls": false,
                "Calls": null,
                "HasEvents": false,
                "Events": null,
                "Constants": null,
                "Errors": [
                    {
                        "Name": "ExecutionFail",
                        "Documentation": null
                    
                    },
                    {
                        "Name": "ExecutionRevert",
                        "Documentation": null
                    
                    },
                    {
                        "Name": "ExecutionFatal",
                        "Documentation": null
                    
                    },
                    {
                        "Name": "ExecutionError",
                        "Documentation": null
                    
                    },
                    {
                        "Name": "InvalidReturnValue",
                        "Documentation": null
                    
                    }
                
                ],
                "Index": 22
            
            },
            // Authorship
            {
                "Name": "Authorship",
                "HasStorage": true,
                "Storage": {
                    "Prefix": "Authorship",
                    "Items": [
                        {
                            "Name": "Uncles",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "Vec\u003cUncleEntryItem\u003cT::BlockNumber, T::Hash, T::AccountId\u003e\u003e",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Uncles"
                            
                            ]
                        
                        },
                        {
                            "Name": "Author",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "T::AccountId",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Author of current block."
                            
                            ]
                        
                        },
                        {
                            "Name": "DidSetUncles",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "bool",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Whether uncles were already set in this block."
                            
                            ]
                        
                        }
                    
                    ]
                
                },
                "HasCalls": true,
                "Calls": [
                    {
                        "Name": "set_uncles",
                        "Args": [
                            {
                                "Name": "new_uncles",
                                "Type": "Vec\u003cT::Header\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Provide a set of uncles."
                        
                        ]
                    
                    }
                
                ],
                "HasEvents": false,
                "Events": null,
                "Constants": [
                    {
                        "Name": "UncleGenerations",
                        "Type": "T::BlockNumber",
                        "Value": "BQAAAA==",
                        "Documentation": [
                            " The number of blocks back we should accept uncles.",
                            " This means that we will deal with uncle-parents that are",
                            " `UncleGenerations + 1` before `now`."
                        
                        ]
                    
                    }
                
                ],
                "Errors": [
                    {
                        "Name": "InvalidUncleParent",
                        "Documentation": [
                            " The uncle parent not in the chain."
                        
                        ]
                    
                    },
                    {
                        "Name": "UnclesAlreadySet",
                        "Documentation": [
                            " Uncles already set in the block."
                        
                        ]
                    
                    },
                    {
                        "Name": "TooManyUncles",
                        "Documentation": [
                            " Too many uncles."
                        
                        ]
                    
                    },
                    {
                        "Name": "GenesisUncle",
                        "Documentation": [
                            " The uncle is genesis."
                        
                        ]
                    
                    },
                    {
                        "Name": "TooHighUncle",
                        "Documentation": [
                            " The uncle is too high in chain."
                        
                        ]
                    
                    },
                    {
                        "Name": "UncleAlreadyIncluded",
                        "Documentation": [
                            " The uncle is already included."
                        
                        ]
                    
                    },
                    {
                        "Name": "OldUncle",
                        "Documentation": [
                            " The uncle isn't recent enough to be included."
                        
                        ]
                    
                    }
                
                ],
                "Index": 30
            
            },
            // Babe
            {
                "Name": "Babe",
                "HasStorage": true,
                "Storage": {
                    "Prefix": "Babe",
                    "Items": [
                        {
                            "Name": "EpochIndex",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "u64",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAAAAAAA=",
                            "Documentation": [
                                " Current epoch index."
                            
                            ]
                        
                        },
                        {
                            "Name": "Authorities",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "Vec\u003c(AuthorityId, BabeAuthorityWeight)\u003e",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Current epoch authorities."
                            
                            ]
                        
                        },
                        {
                            "Name": "GenesisSlot",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "Slot",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAAAAAAA=",
                            "Documentation": [
                                " The slot at which the first epoch actually started. This is 0",
                                " until the first block of the chain."
                            
                            ]
                        
                        },
                        {
                            "Name": "CurrentSlot",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "Slot",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAAAAAAA=",
                            "Documentation": [
                                " Current slot number."
                            
                            ]
                        
                        },
                        {
                            "Name": "Randomness",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "schnorrkel::Randomness",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
                            "Documentation": [
                                " The epoch randomness for the *current* epoch.",
                                "",
                                " # Security",
                                "",
                                " This MUST NOT be used for gambling, as it can be influenced by a",
                                " malicious validator in the short term. It MAY be used in many",
                                " cryptographic protocols, however, so long as one remembers that this",
                                " (like everything else on-chain) it is public. For example, it can be",
                                " used where a number is needed that cannot have been chosen by an",
                                " adversary, for purposes such as public-coin zero-knowledge proofs."
                            
                            ]
                        
                        },
                        {
                            "Name": "PendingEpochConfigChange",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "NextConfigDescriptor",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Pending epoch configuration change that will be applied when the next epoch is enacted."
                            
                            ]
                        
                        },
                        {
                            "Name": "NextRandomness",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "schnorrkel::Randomness",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
                            "Documentation": [
                                " Next epoch randomness."
                            
                            ]
                        
                        },
                        {
                            "Name": "NextAuthorities",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "Vec\u003c(AuthorityId, BabeAuthorityWeight)\u003e",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Next epoch authorities."
                            
                            ]
                        
                        },
                        {
                            "Name": "SegmentIndex",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "u32",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAA==",
                            "Documentation": [
                                " Randomness under construction.",
                                "",
                                " We make a tradeoff between storage accesses and list length.",
                                " We store the under-construction randomness in segments of up to",
                                " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`.",
                                "",
                                " Once a segment reaches this length, we begin the next one.",
                                " We reset all segments and return to `0` at the beginning of every",
                                " epoch."
                            
                            ]
                        
                        },
                        {
                            "Name": "UnderConstruction",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "u32",
                                    "Value": "Vec\u003cschnorrkel::Randomness\u003e",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."
                            
                            ]
                        
                        },
                        {
                            "Name": "Initialized",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "MaybeRandomness",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Temporary value (cleared at block finalization) which is `Some`",
                                " if per-block initialization has already been called for current block."
                            
                            ]
                        
                        },
                        {
                            "Name": "AuthorVrfRandomness",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "MaybeRandomness",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " This field should always be populated during block processing unless",
                                " secondary plain slots are enabled (which don't contain a VRF output).",
                                "",
                                " It is set in `on_initialize`, before it will contain the value from the last block."
                            
                            ]
                        
                        },
                        {
                            "Name": "EpochStart",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "(T::BlockNumber, T::BlockNumber)",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAAAAAAA=",
                            "Documentation": [
                                " The block numbers when the last and current epoch have started, respectively `N-1` and",
                                " `N`.",
                                " NOTE: We track this is in order to annotate the block number when a given pool of",
                                " entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in",
                                " slots, which may be skipped, the block numbers may not line up with the slot numbers."
                            
                            ]
                        
                        },
                        {
                            "Name": "Lateness",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "T::BlockNumber",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAA==",
                            "Documentation": [
                                " How late the current block is compared to its parent.",
                                "",
                                " This entry is populated as part of block execution and is cleaned up",
                                " on block finalization. Querying this storage entry outside of block",
                                " execution context should always yield zero."
                            
                            ]
                        
                        },
                        {
                            "Name": "EpochConfig",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "BabeEpochConfiguration",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " The configuration for the current epoch. Should never be `None` as it is initialized in genesis."
                            
                            ]
                        
                        },
                        {
                            "Name": "NextEpochConfig",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "BabeEpochConfiguration",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " The configuration for the next epoch, `None` if the config will not change",
                                " (you can fallback to `EpochConfig` instead in that case)."
                            
                            ]
                        
                        }
                    
                    ]
                
                },
                "HasCalls": true,
                "Calls": [
                    {
                        "Name": "report_equivocation",
                        "Args": [
                            {
                                "Name": "equivocation_proof",
                                "Type": "Box\u003cEquivocationProof\u003cT::Header\u003e\u003e"
                            
                            },
                            {
                                "Name": "key_owner_proof",
                                "Type": "T::KeyOwnerProof"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Report authority equivocation/misbehavior. This method will verify",
                            " the equivocation proof and validate the given key ownership proof",
                            " against the extracted offender. If both are valid, the offence will",
                            " be reported."
                        
                        ]
                    
                    },
                    {
                        "Name": "report_equivocation_unsigned",
                        "Args": [
                            {
                                "Name": "equivocation_proof",
                                "Type": "Box\u003cEquivocationProof\u003cT::Header\u003e\u003e"
                            
                            },
                            {
                                "Name": "key_owner_proof",
                                "Type": "T::KeyOwnerProof"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Report authority equivocation/misbehavior. This method will verify",
                            " the equivocation proof and validate the given key ownership proof",
                            " against the extracted offender. If both are valid, the offence will",
                            " be reported.",
                            " This extrinsic must be called unsigned and it is expected that only",
                            " block authors will call it (validated in `ValidateUnsigned`), as such",
                            " if the block author is defined it will be defined as the equivocation",
                            " reporter."
                        
                        ]
                    
                    },
                    {
                        "Name": "plan_config_change",
                        "Args": [
                            {
                                "Name": "config",
                                "Type": "NextConfigDescriptor"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Plan an epoch config change. The epoch config change is recorded and will be enacted on",
                            " the next call to `enact_epoch_change`. The config will be activated one epoch after.",
                            " Multiple calls to this method will replace any existing planned config change that had",
                            " not been enacted yet."
                        
                        ]
                    
                    }
                
                ],
                "HasEvents": false,
                "Events": null,
                "Constants": [
                    {
                        "Name": "EpochDuration",
                        "Type": "u64",
                        "Value": "aAEAAAAAAAA=",
                        "Documentation": [
                            " The amount of time, in slots, that each epoch should last.",
                            " NOTE: Currently it is not possible to change the epoch duration after",
                            " the chain has started. Attempting to do so will brick block production."
                        
                        ]
                    
                    },
                    {
                        "Name": "ExpectedBlockTime",
                        "Type": "T::Moment",
                        "Value": "ECcAAAAAAAA=",
                        "Documentation": [
                            " The expected average block time at which BABE should be creating",
                            " blocks. Since BABE is probabilistic it is not trivial to figure out",
                            " what the expected average block time should be based on the slot",
                            " duration and the security parameter `c` (where `1 - c` represents",
                            " the probability of a slot being empty)."
                        
                        ]
                    
                    }
                
                ],
                "Errors": [
                    {
                        "Name": "InvalidEquivocationProof",
                        "Documentation": [
                            " An equivocation proof provided as part of an equivocation report is invalid."
                        
                        ]
                    
                    },
                    {
                        "Name": "InvalidKeyOwnershipProof",
                        "Documentation": [
                            " A key ownership proof provided as part of an equivocation report is invalid."
                        
                        ]
                    
                    },
                    {
                        "Name": "DuplicateOffenceReport",
                        "Documentation": [
                            " A given equivocation report is valid but already previously reported."
                        
                        ]
                    
                    }
                
                ],
                "Index": 31
            
            },
            // Grandpa
            {
                "Name": "Grandpa",
                "HasStorage": true,
                "Storage": {
                    "Prefix": "Grandpa",
                    "Items": [
                        {
                            "Name": "State",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "StoredState\u003cT::BlockNumber\u003e",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " State of the current authority set."
                            
                            ]
                        
                        },
                        {
                            "Name": "PendingChange",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "StoredPendingChange\u003cT::BlockNumber\u003e",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Pending change: (signaled at, scheduled change)."
                            
                            ]
                        
                        },
                        {
                            "Name": "NextForced",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "T::BlockNumber",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " next block number where we can force a change."
                            
                            ]
                        
                        },
                        {
                            "Name": "Stalled",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "(T::BlockNumber, T::BlockNumber)",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " `true` if we are currently stalled."
                            
                            ]
                        
                        },
                        {
                            "Name": "CurrentSetId",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "SetId",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAAAAAAA=",
                            "Documentation": [
                                " The number of changes (both in terms of keys and underlying economic responsibilities)",
                                " in the \"set\" of Grandpa validators from genesis."
                            
                            ]
                        
                        },
                        {
                            "Name": "SetIdSession",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "SetId",
                                    "Value": "SessionIndex",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " A mapping from grandpa set ID to the index of the *most recent* session for which its",
                                " members were responsible.",
                                "",
                                " TWOX-NOTE: `SetId` is not under user control."
                            
                            ]
                        
                        }
                    
                    ]
                
                },
                "HasCalls": true,
                "Calls": [
                    {
                        "Name": "report_equivocation",
                        "Args": [
                            {
                                "Name": "equivocation_proof",
                                "Type": "Box\u003cEquivocationProof\u003cT::Hash, T::BlockNumber\u003e\u003e"
                            
                            },
                            {
                                "Name": "key_owner_proof",
                                "Type": "T::KeyOwnerProof"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Report voter equivocation/misbehavior. This method will verify the",
                            " equivocation proof and validate the given key ownership proof",
                            " against the extracted offender. If both are valid, the offence",
                            " will be reported."
                        
                        ]
                    
                    },
                    {
                        "Name": "report_equivocation_unsigned",
                        "Args": [
                            {
                                "Name": "equivocation_proof",
                                "Type": "Box\u003cEquivocationProof\u003cT::Hash, T::BlockNumber\u003e\u003e"
                            
                            },
                            {
                                "Name": "key_owner_proof",
                                "Type": "T::KeyOwnerProof"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Report voter equivocation/misbehavior. This method will verify the",
                            " equivocation proof and validate the given key ownership proof",
                            " against the extracted offender. If both are valid, the offence",
                            " will be reported.",
                            "",
                            " This extrinsic must be called unsigned and it is expected that only",
                            " block authors will call it (validated in `ValidateUnsigned`), as such",
                            " if the block author is defined it will be defined as the equivocation",
                            " reporter."
                        
                        ]
                    
                    },
                    {
                        "Name": "note_stalled",
                        "Args": [
                            {
                                "Name": "delay",
                                "Type": "T::BlockNumber"
                            
                            },
                            {
                                "Name": "best_finalized_block_number",
                                "Type": "T::BlockNumber"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Note that the current authority set of the GRANDPA finality gadget has",
                            " stalled. This will trigger a forced authority set change at the beginning",
                            " of the next session, to be enacted `delay` blocks after that. The delay",
                            " should be high enough to safely assume that the block signalling the",
                            " forced change will not be re-orged (e.g. 1000 blocks). The GRANDPA voters",
                            " will start the new authority set using the given finalized block as base.",
                            " Only callable by root."
                        
                        ]
                    
                    }
                
                ],
                "HasEvents": true,
                "Events": [
                    {
                        "Name": "NewAuthorities",
                        "Args": [
                            "AuthorityList"
                        
                        ],
                        "Documentation": [
                            " New authority set has been applied. \\[authority_set\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "Paused",
                        "Args": null,
                        "Documentation": [
                            " Current authority set has been paused."
                        
                        ]
                    
                    },
                    {
                        "Name": "Resumed",
                        "Args": null,
                        "Documentation": [
                            " Current authority set has been resumed."
                        
                        ]
                    
                    }
                
                ],
                "Constants": null,
                "Errors": [
                    {
                        "Name": "PauseFailed",
                        "Documentation": [
                            " Attempt to signal GRANDPA pause when the authority set isn't live",
                            " (either paused or already pending pause)."
                        
                        ]
                    
                    },
                    {
                        "Name": "ResumeFailed",
                        "Documentation": [
                            " Attempt to signal GRANDPA resume when the authority set isn't paused",
                            " (either live or already pending resume)."
                        
                        ]
                    
                    },
                    {
                        "Name": "ChangePending",
                        "Documentation": [
                            " Attempt to signal GRANDPA change with one already pending."
                        
                        ]
                    
                    },
                    {
                        "Name": "TooSoon",
                        "Documentation": [
                            " Cannot signal forced change so soon after last."
                        
                        ]
                    
                    },
                    {
                        "Name": "InvalidKeyOwnershipProof",
                        "Documentation": [
                            " A key ownership proof provided as part of an equivocation report is invalid."
                        
                        ]
                    
                    },
                    {
                        "Name": "InvalidEquivocationProof",
                        "Documentation": [
                            " An equivocation proof provided as part of an equivocation report is invalid."
                        
                        ]
                    
                    },
                    {
                        "Name": "DuplicateOffenceReport",
                        "Documentation": [
                            " A given equivocation report is valid but already previously reported."
                        
                        ]
                    
                    }
                
                ],
                "Index": 32
            
            },
            // Staking
            {
                "Name": "Staking",
                "HasStorage": true,
                "Storage": {
                    "Prefix": "Staking",
                    "Items": [
                        {
                            "Name": "HistoryDepth",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "u32",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "VAAAAA==",
                            "Documentation": [
                                " Number of eras to keep in history.",
                                "",
                                " Information is kept for eras in `[current_era - history_depth; current_era]`.",
                                "",
                                " Must be more than the number of eras delayed by session otherwise. I.e. active era must",
                                " always be in history. I.e. `active_era \u003e current_era - history_depth` must be",
                                " guaranteed."
                            
                            ]
                        
                        },
                        {
                            "Name": "ValidatorCount",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "u32",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAA==",
                            "Documentation": [
                                " The ideal number of staking participants."
                            
                            ]
                        
                        },
                        {
                            "Name": "MinimumValidatorCount",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "u32",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAA==",
                            "Documentation": [
                                " Minimum number of staking participants before emergency conditions are imposed."
                            
                            ]
                        
                        },
                        {
                            "Name": "Invulnerables",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "Vec\u003cT::AccountId\u003e",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Any validators that may never be slashed or forcibly kicked. It's a Vec since they're",
                                " easy to initialize and the performance hit is minimal (we expect no more than four",
                                " invulnerables) and restricted to testnets."
                            
                            ]
                        
                        },
                        {
                            "Name": "Bonded",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "T::AccountId",
                                    "Value": "T::AccountId",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Map from all locked \"stash\" accounts to the controller account."
                            
                            ]
                        
                        },
                        {
                            "Name": "MinNominatorBond",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "BalanceOf\u003cT\u003e",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAAAAAAAAAAAAAAAAAA==",
                            "Documentation": [
                                " The minimum active bond to become and maintain the role of a nominator."
                            
                            ]
                        
                        },
                        {
                            "Name": "MinValidatorBond",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "BalanceOf\u003cT\u003e",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAAAAAAAAAAAAAAAAAA==",
                            "Documentation": [
                                " The minimum active bond to become and maintain the role of a validator."
                            
                            ]
                        
                        },
                        {
                            "Name": "Ledger",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": true,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "T::AccountId",
                                    "Value": "StakingLedger\u003cT::AccountId, BalanceOf\u003cT\u003e\u003e",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Map from all (unlocked) \"controller\" accounts to the info regarding the staking."
                            
                            ]
                        
                        },
                        {
                            "Name": "Payee",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "T::AccountId",
                                    "Value": "RewardDestination\u003cT::AccountId\u003e",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Where the reward payment should be made. Keyed by stash."
                            
                            ]
                        
                        },
                        {
                            "Name": "Validators",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "T::AccountId",
                                    "Value": "ValidatorPrefs",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAA=",
                            "Documentation": [
                                " The map from (wannabe) validator stash key to the preferences of that validator.",
                                "",
                                " When updating this storage item, you must also update the `CounterForValidators`."
                            
                            ]
                        
                        },
                        {
                            "Name": "CounterForValidators",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "u32",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAA==",
                            "Documentation": [
                                " A tracker to keep count of the number of items in the `Validators` map."
                            
                            ]
                        
                        },
                        {
                            "Name": "MaxValidatorsCount",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "u32",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " The maximum validator count before we stop allowing new validators to join.",
                                "",
                                " When this value is not set, no limits are enforced."
                            
                            ]
                        
                        },
                        {
                            "Name": "Nominators",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "T::AccountId",
                                    "Value": "Nominations\u003cT::AccountId\u003e",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " The map from nominator stash key to the set of stash keys of all validators to nominate.",
                                "",
                                " When updating this storage item, you must also update the `CounterForNominators`."
                            
                            ]
                        
                        },
                        {
                            "Name": "CounterForNominators",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "u32",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAA==",
                            "Documentation": [
                                " A tracker to keep count of the number of items in the `Nominators` map."
                            
                            ]
                        
                        },
                        {
                            "Name": "MaxNominatorsCount",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "u32",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " The maximum nominator count before we stop allowing new validators to join.",
                                "",
                                " When this value is not set, no limits are enforced."
                            
                            ]
                        
                        },
                        {
                            "Name": "CurrentEra",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "EraIndex",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " The current era index.",
                                "",
                                " This is the latest planned era, depending on how the Session pallet queues the validator",
                                " set, it might be active or not."
                            
                            ]
                        
                        },
                        {
                            "Name": "ActiveEra",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "ActiveEraInfo",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " The active era information, it holds index and start.",
                                "",
                                " The active era is the era being currently rewarded. Validator set of this era must be",
                                " equal to [`SessionInterface::validators`]."
                            
                            ]
                        
                        },
                        {
                            "Name": "ErasStartSessionIndex",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "EraIndex",
                                    "Value": "SessionIndex",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " The session index at which the era start for the last `HISTORY_DEPTH` eras.",
                                "",
                                " Note: This tracks the starting session (i.e. session index when era start being active)",
                                " for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."
                            
                            ]
                        
                        },
                        {
                            "Name": "ErasStakers",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": true,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "EraIndex",
                                    "Key2": "T::AccountId",
                                    "Value": "Exposure\u003cT::AccountId, BalanceOf\u003cT\u003e\u003e",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAA",
                            "Documentation": [
                                " Exposure of validator at era.",
                                "",
                                " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                                "",
                                " Is it removed after `HISTORY_DEPTH` eras.",
                                " If stakers hasn't been set or has been removed then empty exposure is returned."
                            
                            ]
                        
                        },
                        {
                            "Name": "ErasStakersClipped",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": true,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "EraIndex",
                                    "Key2": "T::AccountId",
                                    "Value": "Exposure\u003cT::AccountId, BalanceOf\u003cT\u003e\u003e",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAA",
                            "Documentation": [
                                " Clipped Exposure of validator at era.",
                                "",
                                " This is similar to [`ErasStakers`] but number of nominators exposed is reduced to the",
                                " `T::MaxNominatorRewardedPerValidator` biggest stakers.",
                                " (Note: the field `total` and `own` of the exposure remains unchanged).",
                                " This is used to limit the i/o cost for the nominator payout.",
                                "",
                                " This is keyed fist by the era index to allow bulk deletion and then the stash account.",
                                "",
                                " Is it removed after `HISTORY_DEPTH` eras.",
                                " If stakers hasn't been set or has been removed then empty exposure is returned."
                            
                            ]
                        
                        },
                        {
                            "Name": "ErasValidatorPrefs",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": true,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "EraIndex",
                                    "Key2": "T::AccountId",
                                    "Value": "ValidatorPrefs",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAA=",
                            "Documentation": [
                                " Similar to `ErasStakers`, this holds the preferences of validators.",
                                "",
                                " This is keyed first by the era index to allow bulk deletion and then the stash account.",
                                "",
                                " Is it removed after `HISTORY_DEPTH` eras."
                            
                            ]
                        
                        },
                        {
                            "Name": "ErasValidatorReward",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "EraIndex",
                                    "Value": "BalanceOf\u003cT\u003e",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " The total validator era payout for the last `HISTORY_DEPTH` eras.",
                                "",
                                " Eras that haven't finished yet or has been removed doesn't have reward."
                            
                            ]
                        
                        },
                        {
                            "Name": "ErasRewardPoints",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "EraIndex",
                                    "Value": "EraRewardPoints\u003cT::AccountId\u003e",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAAA=",
                            "Documentation": [
                                " Rewards for the last `HISTORY_DEPTH` eras.",
                                " If reward hasn't been set or has been removed then 0 reward is returned."
                            
                            ]
                        
                        },
                        {
                            "Name": "ErasTotalStake",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "EraIndex",
                                    "Value": "BalanceOf\u003cT\u003e",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAAAAAAAAAAAAAAAAAA==",
                            "Documentation": [
                                " The total amount staked for the last `HISTORY_DEPTH` eras.",
                                " If total hasn't been set or has been removed then 0 stake is returned."
                            
                            ]
                        
                        },
                        {
                            "Name": "ForceEra",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "Forcing",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Mode of era forcing."
                            
                            ]
                        
                        },
                        {
                            "Name": "SlashRewardFraction",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "Perbill",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAA==",
                            "Documentation": [
                                " The percentage of the slash that is distributed to reporters.",
                                "",
                                " The rest of the slashed value is handled by the `Slash`."
                            
                            ]
                        
                        },
                        {
                            "Name": "CanceledSlashPayout",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "BalanceOf\u003cT\u003e",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAAAAAAAAAAAAAAAAAA==",
                            "Documentation": [
                                " The amount of currency given to reporters of a slash event which was",
                                " canceled by extraordinary circumstances (e.g. governance)."
                            
                            ]
                        
                        },
                        {
                            "Name": "UnappliedSlashes",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "EraIndex",
                                    "Value": "Vec\u003cUnappliedSlash\u003cT::AccountId, BalanceOf\u003cT\u003e\u003e\u003e",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " All unapplied slashes that are queued for later."
                            
                            ]
                        
                        },
                        {
                            "Name": "BondedEras",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "Vec\u003c(EraIndex, SessionIndex)\u003e",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " A mapping from still-bonded eras to the first session index of that era.",
                                "",
                                " Must contains information for eras for the range:",
                                " `[active_era - bounding_duration; active_era]`"
                            
                            ]
                        
                        },
                        {
                            "Name": "ValidatorSlashInEra",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": true,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "EraIndex",
                                    "Key2": "T::AccountId",
                                    "Value": "(Perbill, BalanceOf\u003cT\u003e)",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " All slashing events on validators, mapped by era to the highest slash proportion",
                                " and slash value of the era."
                            
                            ]
                        
                        },
                        {
                            "Name": "NominatorSlashInEra",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": true,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "EraIndex",
                                    "Key2": "T::AccountId",
                                    "Value": "BalanceOf\u003cT\u003e",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " All slashing events on nominators, mapped by era to the highest slash value of the era."
                            
                            ]
                        
                        },
                        {
                            "Name": "SlashingSpans",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "T::AccountId",
                                    "Value": "slashing::SlashingSpans",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Slashing spans for stash accounts."
                            
                            ]
                        
                        },
                        {
                            "Name": "SpanSlash",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "(T::AccountId, slashing::SpanIndex)",
                                    "Value": "slashing::SpanRecord\u003cBalanceOf\u003cT\u003e\u003e",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
                            "Documentation": [
                                " Records information about the maximum slash of a stash within a slashing span,",
                                " as well as how much reward has been paid out."
                            
                            ]
                        
                        },
                        {
                            "Name": "EarliestUnappliedSlash",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "EraIndex",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " The earliest era for which we have a pending, unapplied slash."
                            
                            ]
                        
                        },
                        {
                            "Name": "CurrentPlannedSession",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "SessionIndex",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAA==",
                            "Documentation": [
                                " The last planned session scheduled by the session pallet.",
                                "",
                                " This is basically in sync with the call to [`pallet_session::SessionManager::new_session`]."
                            
                            ]
                        
                        },
                        {
                            "Name": "StorageVersion",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "Releases",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "Bg==",
                            "Documentation": [
                                " True if network has been upgraded to this version.",
                                " Storage version of the pallet.",
                                "",
                                " This is set to v7.0.0 for new networks."
                            
                            ]
                        
                        },
                        {
                            "Name": "ChillThreshold",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "Percent",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " The threshold for when users can start calling `chill_other` for other validators / nominators.",
                                " The threshold is compared to the actual number of validators / nominators (`CountFor*`) in",
                                " the system compared to the configured max (`Max*Count`)."
                            
                            ]
                        
                        }
                    
                    ]
                
                },
                "HasCalls": true,
                "Calls": [
                    {
                        "Name": "bond",
                        "Args": [
                            {
                                "Name": "controller",
                                "Type": "\u003cT::Lookup as StaticLookup\u003e::Source"
                            
                            },
                            {
                                "Name": "value",
                                "Type": "Compact\u003cBalanceOf\u003cT\u003e\u003e"
                            
                            },
                            {
                                "Name": "payee",
                                "Type": "RewardDestination\u003cT::AccountId\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Take the origin account as a stash and lock up `value` of its balance. `controller` will",
                            " be the account that controls it.",
                            "",
                            " `value` must be more than the `minimum_balance` specified by `T::Currency`.",
                            "",
                            " The dispatch origin for this call must be _Signed_ by the stash account.",
                            "",
                            " Emits `Bonded`.",
                            " # \u003cweight\u003e",
                            " - Independent of the arguments. Moderate complexity.",
                            " - O(1).",
                            " - Three extra DB entries.",
                            "",
                            " NOTE: Two of the storage writes (`Self::bonded`, `Self::payee`) are _never_ cleaned",
                            " unless the `origin` falls below _existential deposit_ and gets removed as dust.",
                            " ------------------",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "bond_extra",
                        "Args": [
                            {
                                "Name": "max_additional",
                                "Type": "Compact\u003cBalanceOf\u003cT\u003e\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Add some extra amount that have appeared in the stash `free_balance` into the balance up",
                            " for staking.",
                            "",
                            " The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                            "",
                            " Use this if there are additional funds in your stash account that you wish to bond.",
                            " Unlike [`bond`](Self::bond) or [`unbond`](Self::unbond) this function does not impose any limitation",
                            " on the amount that can be added.",
                            "",
                            " Emits `Bonded`.",
                            "",
                            " # \u003cweight\u003e",
                            " - Independent of the arguments. Insignificant complexity.",
                            " - O(1).",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "unbond",
                        "Args": [
                            {
                                "Name": "value",
                                "Type": "Compact\u003cBalanceOf\u003cT\u003e\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Schedule a portion of the stash to be unlocked ready for transfer out after the bond",
                            " period ends. If this leaves an amount actively bonded less than",
                            " T::Currency::minimum_balance(), then it is increased to the full amount.",
                            "",
                            " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                            "",
                            " Once the unlock period is done, you can call `withdraw_unbonded` to actually move",
                            " the funds out of management ready for transfer.",
                            "",
                            " No more than a limited number of unlocking chunks (see `MAX_UNLOCKING_CHUNKS`)",
                            " can co-exists at the same time. In that case, [`Call::withdraw_unbonded`] need",
                            " to be called first to remove some of the chunks (if possible).",
                            "",
                            " If a user encounters the `InsufficientBond` error when calling this extrinsic,",
                            " they should call `chill` first in order to free up their bonded funds.",
                            "",
                            " Emits `Unbonded`.",
                            "",
                            " See also [`Call::withdraw_unbonded`]."
                        
                        ]
                    
                    },
                    {
                        "Name": "withdraw_unbonded",
                        "Args": [
                            {
                                "Name": "num_slashing_spans",
                                "Type": "u32"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Remove any unlocked chunks from the `unlocking` queue from our management.",
                            "",
                            " This essentially frees up that balance to be used by the stash account to do",
                            " whatever it wants.",
                            "",
                            " The dispatch origin for this call must be _Signed_ by the controller.",
                            "",
                            " Emits `Withdrawn`.",
                            "",
                            " See also [`Call::unbond`].",
                            "",
                            " # \u003cweight\u003e",
                            " Complexity O(S) where S is the number of slashing spans to remove",
                            " NOTE: Weight annotation is the kill scenario, we refund otherwise.",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "validate",
                        "Args": [
                            {
                                "Name": "prefs",
                                "Type": "ValidatorPrefs"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Declare the desire to validate for the origin controller.",
                            "",
                            " Effects will be felt at the beginning of the next era.",
                            "",
                            " The dispatch origin for this call must be _Signed_ by the controller, not the stash."
                        
                        ]
                    
                    },
                    {
                        "Name": "nominate",
                        "Args": [
                            {
                                "Name": "targets",
                                "Type": "Vec\u003c\u003cT::Lookup as StaticLookup\u003e::Source\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Declare the desire to nominate `targets` for the origin controller.",
                            "",
                            " Effects will be felt at the beginning of the next era.",
                            "",
                            " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                            "",
                            " # \u003cweight\u003e",
                            " - The transaction's complexity is proportional to the size of `targets` (N)",
                            " which is capped at CompactAssignments::LIMIT (MAX_NOMINATIONS).",
                            " - Both the reads and writes follow a similar pattern.",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "chill",
                        "Args": null,
                        "Documentation": [
                            " Declare no desire to either validate or nominate.",
                            "",
                            " Effects will be felt at the beginning of the next era.",
                            "",
                            " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                            "",
                            " # \u003cweight\u003e",
                            " - Independent of the arguments. Insignificant complexity.",
                            " - Contains one read.",
                            " - Writes are limited to the `origin` account key.",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "set_payee",
                        "Args": [
                            {
                                "Name": "payee",
                                "Type": "RewardDestination\u003cT::AccountId\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " (Re-)set the payment target for a controller.",
                            "",
                            " Effects will be felt at the beginning of the next era.",
                            "",
                            " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                            "",
                            " # \u003cweight\u003e",
                            " - Independent of the arguments. Insignificant complexity.",
                            " - Contains a limited number of reads.",
                            " - Writes are limited to the `origin` account key.",
                            " ---------",
                            " - Weight: O(1)",
                            " - DB Weight:",
                            "     - Read: Ledger",
                            "     - Write: Payee",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "set_controller",
                        "Args": [
                            {
                                "Name": "controller",
                                "Type": "\u003cT::Lookup as StaticLookup\u003e::Source"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " (Re-)set the controller of a stash.",
                            "",
                            " Effects will be felt at the beginning of the next era.",
                            "",
                            " The dispatch origin for this call must be _Signed_ by the stash, not the controller.",
                            "",
                            " # \u003cweight\u003e",
                            " - Independent of the arguments. Insignificant complexity.",
                            " - Contains a limited number of reads.",
                            " - Writes are limited to the `origin` account key.",
                            " ----------",
                            " Weight: O(1)",
                            " DB Weight:",
                            " - Read: Bonded, Ledger New Controller, Ledger Old Controller",
                            " - Write: Bonded, Ledger New Controller, Ledger Old Controller",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "set_validator_count",
                        "Args": [
                            {
                                "Name": "new",
                                "Type": "Compact\u003cu32\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Sets the ideal number of validators.",
                            "",
                            " The dispatch origin must be Root.",
                            "",
                            " # \u003cweight\u003e",
                            " Weight: O(1)",
                            " Write: Validator Count",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "increase_validator_count",
                        "Args": [
                            {
                                "Name": "additional",
                                "Type": "Compact\u003cu32\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Increments the ideal number of validators.",
                            "",
                            " The dispatch origin must be Root.",
                            "",
                            " # \u003cweight\u003e",
                            " Same as [`Self::set_validator_count`].",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "scale_validator_count",
                        "Args": [
                            {
                                "Name": "factor",
                                "Type": "Percent"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Scale up the ideal number of validators by a factor.",
                            "",
                            " The dispatch origin must be Root.",
                            "",
                            " # \u003cweight\u003e",
                            " Same as [`Self::set_validator_count`].",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "force_no_eras",
                        "Args": null,
                        "Documentation": [
                            " Force there to be no new eras indefinitely.",
                            "",
                            " The dispatch origin must be Root.",
                            "",
                            " # Warning",
                            "",
                            " The election process starts multiple blocks before the end of the era.",
                            " Thus the election process may be ongoing when this is called. In this case the",
                            " election will continue until the next era is triggered.",
                            "",
                            " # \u003cweight\u003e",
                            " - No arguments.",
                            " - Weight: O(1)",
                            " - Write: ForceEra",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "force_new_era",
                        "Args": null,
                        "Documentation": [
                            " Force there to be a new era at the end of the next session. After this, it will be",
                            " reset to normal (non-forced) behaviour.",
                            "",
                            " The dispatch origin must be Root.",
                            "",
                            " # Warning",
                            "",
                            " The election process starts multiple blocks before the end of the era.",
                            " If this is called just before a new era is triggered, the election process may not",
                            " have enough blocks to get a result.",
                            "",
                            " # \u003cweight\u003e",
                            " - No arguments.",
                            " - Weight: O(1)",
                            " - Write ForceEra",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "set_invulnerables",
                        "Args": [
                            {
                                "Name": "invulnerables",
                                "Type": "Vec\u003cT::AccountId\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Set the validators who cannot be slashed (if any).",
                            "",
                            " The dispatch origin must be Root.",
                            "",
                            " # \u003cweight\u003e",
                            " - O(V)",
                            " - Write: Invulnerables",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "force_unstake",
                        "Args": [
                            {
                                "Name": "stash",
                                "Type": "T::AccountId"
                            
                            },
                            {
                                "Name": "num_slashing_spans",
                                "Type": "u32"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Force a current staker to become completely unstaked, immediately.",
                            "",
                            " The dispatch origin must be Root.",
                            "",
                            " # \u003cweight\u003e",
                            " O(S) where S is the number of slashing spans to be removed",
                            " Reads: Bonded, Slashing Spans, Account, Locks",
                            " Writes: Bonded, Slashing Spans (if S \u003e 0), Ledger, Payee, Validators, Nominators, Account, Locks",
                            " Writes Each: SpanSlash * S",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "force_new_era_always",
                        "Args": null,
                        "Documentation": [
                            " Force there to be a new era at the end of sessions indefinitely.",
                            "",
                            " The dispatch origin must be Root.",
                            "",
                            " # Warning",
                            "",
                            " The election process starts multiple blocks before the end of the era.",
                            " If this is called just before a new era is triggered, the election process may not",
                            " have enough blocks to get a result.",
                            "",
                            " # \u003cweight\u003e",
                            " - Weight: O(1)",
                            " - Write: ForceEra",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "cancel_deferred_slash",
                        "Args": [
                            {
                                "Name": "era",
                                "Type": "EraIndex"
                            
                            },
                            {
                                "Name": "slash_indices",
                                "Type": "Vec\u003cu32\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Cancel enactment of a deferred slash.",
                            "",
                            " Can be called by the `T::SlashCancelOrigin`.",
                            "",
                            " Parameters: era and indices of the slashes for that era to kill.",
                            "",
                            " # \u003cweight\u003e",
                            " Complexity: O(U + S)",
                            " with U unapplied slashes weighted with U=1000",
                            " and S is the number of slash indices to be canceled.",
                            " - Read: Unapplied Slashes",
                            " - Write: Unapplied Slashes",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "payout_stakers",
                        "Args": [
                            {
                                "Name": "validator_stash",
                                "Type": "T::AccountId"
                            
                            },
                            {
                                "Name": "era",
                                "Type": "EraIndex"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Pay out all the stakers behind a single validator for a single era.",
                            "",
                            " - `validator_stash` is the stash account of the validator. Their nominators, up to",
                            "   `T::MaxNominatorRewardedPerValidator`, will also receive their rewards.",
                            " - `era` may be any era between `[current_era - history_depth; current_era]`.",
                            "",
                            " The origin of this call must be _Signed_. Any account can call this function, even if",
                            " it is not one of the stakers.",
                            "",
                            " # \u003cweight\u003e",
                            " - Time complexity: at most O(MaxNominatorRewardedPerValidator).",
                            " - Contains a limited number of reads and writes.",
                            " -----------",
                            " N is the Number of payouts for the validator (including the validator)",
                            " Weight:",
                            " - Reward Destination Staked: O(N)",
                            " - Reward Destination Controller (Creating): O(N)",
                            "",
                            "   NOTE: weights are assuming that payouts are made to alive stash account (Staked).",
                            "   Paying even a dead controller is cheaper weight-wise. We don't do any refunds here.",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "rebond",
                        "Args": [
                            {
                                "Name": "value",
                                "Type": "Compact\u003cBalanceOf\u003cT\u003e\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Rebond a portion of the stash scheduled to be unlocked.",
                            "",
                            " The dispatch origin must be signed by the controller.",
                            "",
                            " # \u003cweight\u003e",
                            " - Time complexity: O(L), where L is unlocking chunks",
                            " - Bounded by `MAX_UNLOCKING_CHUNKS`.",
                            " - Storage changes: Can't increase storage, only decrease it.",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "set_history_depth",
                        "Args": [
                            {
                                "Name": "new_history_depth",
                                "Type": "Compact\u003cEraIndex\u003e"
                            
                            },
                            {
                                "Name": "_era_items_deleted",
                                "Type": "Compact\u003cu32\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Set `HistoryDepth` value. This function will delete any history information",
                            " when `HistoryDepth` is reduced.",
                            "",
                            " Parameters:",
                            " - `new_history_depth`: The new history depth you would like to set.",
                            " - `era_items_deleted`: The number of items that will be deleted by this dispatch.",
                            "    This should report all the storage items that will be deleted by clearing old",
                            "    era history. Needed to report an accurate weight for the dispatch. Trusted by",
                            "    `Root` to report an accurate number.",
                            "",
                            " Origin must be root.",
                            "",
                            " # \u003cweight\u003e",
                            " - E: Number of history depths removed, i.e. 10 -\u003e 7 = 3",
                            " - Weight: O(E)",
                            " - DB Weight:",
                            "     - Reads: Current Era, History Depth",
                            "     - Writes: History Depth",
                            "     - Clear Prefix Each: Era Stakers, EraStakersClipped, ErasValidatorPrefs",
                            "     - Writes Each: ErasValidatorReward, ErasRewardPoints, ErasTotalStake, ErasStartSessionIndex",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "reap_stash",
                        "Args": [
                            {
                                "Name": "stash",
                                "Type": "T::AccountId"
                            
                            },
                            {
                                "Name": "num_slashing_spans",
                                "Type": "u32"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Remove all data structure concerning a staker/stash once its balance is at the minimum.",
                            " This is essentially equivalent to `withdraw_unbonded` except it can be called by anyone",
                            " and the target `stash` must have no funds left beyond the ED.",
                            "",
                            " This can be called from any origin.",
                            "",
                            " - `stash`: The stash account to reap. Its balance must be zero.",
                            "",
                            " # \u003cweight\u003e",
                            " Complexity: O(S) where S is the number of slashing spans on the account.",
                            " DB Weight:",
                            " - Reads: Stash Account, Bonded, Slashing Spans, Locks",
                            " - Writes: Bonded, Slashing Spans (if S \u003e 0), Ledger, Payee, Validators, Nominators, Stash Account, Locks",
                            " - Writes Each: SpanSlash * S",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "kick",
                        "Args": [
                            {
                                "Name": "who",
                                "Type": "Vec\u003c\u003cT::Lookup as StaticLookup\u003e::Source\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Remove the given nominations from the calling validator.",
                            "",
                            " Effects will be felt at the beginning of the next era.",
                            "",
                            " The dispatch origin for this call must be _Signed_ by the controller, not the stash.",
                            "",
                            " - `who`: A list of nominator stash accounts who are nominating this validator which",
                            "   should no longer be nominating this validator.",
                            "",
                            " Note: Making this call only makes sense if you first set the validator preferences to",
                            " block any further nominations."
                        
                        ]
                    
                    },
                    {
                        "Name": "set_staking_limits",
                        "Args": [
                            {
                                "Name": "min_nominator_bond",
                                "Type": "BalanceOf\u003cT\u003e"
                            
                            },
                            {
                                "Name": "min_validator_bond",
                                "Type": "BalanceOf\u003cT\u003e"
                            
                            },
                            {
                                "Name": "max_nominator_count",
                                "Type": "Option\u003cu32\u003e"
                            
                            },
                            {
                                "Name": "max_validator_count",
                                "Type": "Option\u003cu32\u003e"
                            
                            },
                            {
                                "Name": "threshold",
                                "Type": "Option\u003cPercent\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Update the various staking limits this pallet.",
                            "",
                            " * `min_nominator_bond`: The minimum active bond needed to be a nominator.",
                            " * `min_validator_bond`: The minimum active bond needed to be a validator.",
                            " * `max_nominator_count`: The max number of users who can be a nominator at once.",
                            "   When set to `None`, no limit is enforced.",
                            " * `max_validator_count`: The max number of users who can be a validator at once.",
                            "   When set to `None`, no limit is enforced.",
                            "",
                            " Origin must be Root to call this function.",
                            "",
                            " NOTE: Existing nominators and validators will not be affected by this update.",
                            " to kick people under the new limits, `chill_other` should be called."
                        
                        ]
                    
                    },
                    {
                        "Name": "chill_other",
                        "Args": [
                            {
                                "Name": "controller",
                                "Type": "T::AccountId"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Declare a `controller` to stop participating as either a validator or nominator.",
                            "",
                            " Effects will be felt at the beginning of the next era.",
                            "",
                            " The dispatch origin for this call must be _Signed_, but can be called by anyone.",
                            "",
                            " If the caller is the same as the controller being targeted, then no further checks are",
                            " enforced, and this function behaves just like `chill`.",
                            "",
                            " If the caller is different than the controller being targeted, the following conditions",
                            " must be met:",
                            " * A `ChillThreshold` must be set and checked which defines how close to the max",
                            "   nominators or validators we must reach before users can start chilling one-another.",
                            " * A `MaxNominatorCount` and `MaxValidatorCount` must be set which is used to determine",
                            "   how close we are to the threshold.",
                            " * A `MinNominatorBond` and `MinValidatorBond` must be set and checked, which determines",
                            "   if this is a person that should be chilled because they have not met the threshold",
                            "   bond required.",
                            "",
                            " This can be helpful if bond requirements are updated, and we need to remove old users",
                            " who do not satisfy these requirements."
                        
                        ]
                    
                    }
                
                ],
                "HasEvents": true,
                "Events": [
                    {
                        "Name": "EraPaid",
                        "Args": [
                            "EraIndex",
                            "Balance",
                            "Balance"
                        
                        ],
                        "Documentation": [
                            " The era payout has been set; the first balance is the validator-payout; the second is",
                            " the remainder from the maximum amount of reward.",
                            " \\[era_index, validator_payout, remainder\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "Rewarded",
                        "Args": [
                            "AccountId",
                            "Balance"
                        
                        ],
                        "Documentation": [
                            " The nominator has been rewarded by this amount. \\[stash, amount\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "Slashed",
                        "Args": [
                            "AccountId",
                            "Balance"
                        
                        ],
                        "Documentation": [
                            " One validator (and its nominators) has been slashed by the given amount.",
                            " \\[validator, amount\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "OldSlashingReportDiscarded",
                        "Args": [
                            "SessionIndex"
                        
                        ],
                        "Documentation": [
                            " An old slashing report from a prior era was discarded because it could",
                            " not be processed. \\[session_index\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "StakersElected",
                        "Args": null,
                        "Documentation": [
                            " A new set of stakers was elected."
                        
                        ]
                    
                    },
                    {
                        "Name": "Bonded",
                        "Args": [
                            "AccountId",
                            "Balance"
                        
                        ],
                        "Documentation": [
                            " An account has bonded this amount. \\[stash, amount\\]",
                            "",
                            " NOTE: This event is only emitted when funds are bonded via a dispatchable. Notably,",
                            " it will not be emitted for staking rewards when they are added to stake."
                        
                        ]
                    
                    },
                    {
                        "Name": "Unbonded",
                        "Args": [
                            "AccountId",
                            "Balance"
                        
                        ],
                        "Documentation": [
                            " An account has unbonded this amount. \\[stash, amount\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "Withdrawn",
                        "Args": [
                            "AccountId",
                            "Balance"
                        
                        ],
                        "Documentation": [
                            " An account has called `withdraw_unbonded` and removed unbonding chunks worth `Balance`",
                            " from the unlocking queue. \\[stash, amount\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "Kicked",
                        "Args": [
                            "AccountId",
                            "AccountId"
                        
                        ],
                        "Documentation": [
                            " A nominator has been kicked from a validator. \\[nominator, stash\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "StakingElectionFailed",
                        "Args": null,
                        "Documentation": [
                            " The election failed. No new era is planned."
                        
                        ]
                    
                    },
                    {
                        "Name": "Chilled",
                        "Args": [
                            "AccountId"
                        
                        ],
                        "Documentation": [
                            " An account has stopped participating as either a validator or nominator.",
                            " \\[stash\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "PayoutStarted",
                        "Args": [
                            "EraIndex",
                            "AccountId"
                        
                        ],
                        "Documentation": [
                            " The stakers' rewards are getting paid. \\[era_index, validator_stash\\]"
                        
                        ]
                    
                    }
                
                ],
                "Constants": [
                    {
                        "Name": "SessionsPerEra",
                        "Type": "SessionIndex",
                        "Value": "GAAAAA==",
                        "Documentation": [
                            " Number of sessions per era."
                        
                        ]
                    
                    },
                    {
                        "Name": "BondingDuration",
                        "Type": "EraIndex",
                        "Value": "HAAAAA==",
                        "Documentation": [
                            " Number of eras that staked funds must remain bonded for."
                        
                        ]
                    
                    },
                    {
                        "Name": "SlashDeferDuration",
                        "Type": "EraIndex",
                        "Value": "GwAAAA==",
                        "Documentation": [
                            " Number of eras that slashes are deferred by, after computation.",
                            "",
                            " This should be less than the bonding duration. Set to 0 if slashes",
                            " should be applied immediately, without opportunity for intervention."
                        
                        ]
                    
                    },
                    {
                        "Name": "MaxNominatorRewardedPerValidator",
                        "Type": "u32",
                        "Value": "QAAAAA==",
                        "Documentation": [
                            " The maximum number of nominators rewarded for each validator.",
                            "",
                            " For each validator only the `$MaxNominatorRewardedPerValidator` biggest stakers can claim",
                            " their reward. This used to limit the i/o cost for the nominator payout."
                        
                        ]
                    
                    },
                    {
                        "Name": "MaxNominations",
                        "Type": "u32",
                        "Value": "EAAAAA==",
                        "Documentation": null
                    
                    }
                
                ],
                "Errors": [
                    {
                        "Name": "NotController",
                        "Documentation": [
                            " Not a controller account."
                        
                        ]
                    
                    },
                    {
                        "Name": "NotStash",
                        "Documentation": [
                            " Not a stash account."
                        
                        ]
                    
                    },
                    {
                        "Name": "AlreadyBonded",
                        "Documentation": [
                            " Stash is already bonded."
                        
                        ]
                    
                    },
                    {
                        "Name": "AlreadyPaired",
                        "Documentation": [
                            " Controller is already paired."
                        
                        ]
                    
                    },
                    {
                        "Name": "EmptyTargets",
                        "Documentation": [
                            " Targets cannot be empty."
                        
                        ]
                    
                    },
                    {
                        "Name": "DuplicateIndex",
                        "Documentation": [
                            " Duplicate index."
                        
                        ]
                    
                    },
                    {
                        "Name": "InvalidSlashIndex",
                        "Documentation": [
                            " Slash record index out of bounds."
                        
                        ]
                    
                    },
                    {
                        "Name": "InsufficientBond",
                        "Documentation": [
                            " Can not bond with value less than minimum required."
                        
                        ]
                    
                    },
                    {
                        "Name": "NoMoreChunks",
                        "Documentation": [
                            " Can not schedule more unlock chunks."
                        
                        ]
                    
                    },
                    {
                        "Name": "NoUnlockChunk",
                        "Documentation": [
                            " Can not rebond without unlocking chunks."
                        
                        ]
                    
                    },
                    {
                        "Name": "FundedTarget",
                        "Documentation": [
                            " Attempting to target a stash that still has funds."
                        
                        ]
                    
                    },
                    {
                        "Name": "InvalidEraToReward",
                        "Documentation": [
                            " Invalid era to reward."
                        
                        ]
                    
                    },
                    {
                        "Name": "InvalidNumberOfNominations",
                        "Documentation": [
                            " Invalid number of nominations."
                        
                        ]
                    
                    },
                    {
                        "Name": "NotSortedAndUnique",
                        "Documentation": [
                            " Items are not sorted and unique."
                        
                        ]
                    
                    },
                    {
                        "Name": "AlreadyClaimed",
                        "Documentation": [
                            " Rewards for this era have already been claimed for this validator."
                        
                        ]
                    
                    },
                    {
                        "Name": "IncorrectHistoryDepth",
                        "Documentation": [
                            " Incorrect previous history depth input provided."
                        
                        ]
                    
                    },
                    {
                        "Name": "IncorrectSlashingSpans",
                        "Documentation": [
                            " Incorrect number of slashing spans provided."
                        
                        ]
                    
                    },
                    {
                        "Name": "BadState",
                        "Documentation": [
                            " Internal state has become somehow corrupted and the operation cannot continue."
                        
                        ]
                    
                    },
                    {
                        "Name": "TooManyTargets",
                        "Documentation": [
                            " Too many nomination targets supplied."
                        
                        ]
                    
                    },
                    {
                        "Name": "BadTarget",
                        "Documentation": [
                            " A nomination target was supplied that was blocked or otherwise not a validator."
                        
                        ]
                    
                    },
                    {
                        "Name": "CannotChillOther",
                        "Documentation": [
                            " The user has enough bond and thus cannot be chilled forcefully by an external person."
                        
                        ]
                    
                    },
                    {
                        "Name": "TooManyNominators",
                        "Documentation": [
                            " There are too many nominators in the system. Governance needs to adjust the staking settings",
                            " to keep things safe for the runtime."
                        
                        ]
                    
                    },
                    {
                        "Name": "TooManyValidators",
                        "Documentation": [
                            " There are too many validators in the system. Governance needs to adjust the staking settings",
                            " to keep things safe for the runtime."
                        
                        ]
                    
                    }
                
                ],
                "Index": 33
            
            },
            // Session
            {
                "Name": "Session",
                "HasStorage": true,
                "Storage": {
                    "Prefix": "Session",
                    "Items": [
                        {
                            "Name": "Validators",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "Vec\u003cT::ValidatorId\u003e",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " The current set of validators."
                            
                            ]
                        
                        },
                        {
                            "Name": "CurrentIndex",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "SessionIndex",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAA==",
                            "Documentation": [
                                " Current index of the session."
                            
                            ]
                        
                        },
                        {
                            "Name": "QueuedChanged",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "bool",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " True if the underlying economic identities or weighting behind the validators",
                                " has changed in the queued validator set."
                            
                            ]
                        
                        },
                        {
                            "Name": "QueuedKeys",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "Vec\u003c(T::ValidatorId, T::Keys)\u003e",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " The queued keys for the next session. When the next session begins, these keys",
                                " will be used to determine the validator's session keys."
                            
                            ]
                        
                        },
                        {
                            "Name": "DisabledValidators",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "Vec\u003cu32\u003e",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Indices of disabled validators.",
                                "",
                                " The set is cleared when `on_session_ending` returns a new set of identities."
                            
                            ]
                        
                        },
                        {
                            "Name": "NextKeys",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "T::ValidatorId",
                                    "Value": "T::Keys",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " The next session keys for a validator."
                            
                            ]
                        
                        },
                        {
                            "Name": "KeyOwner",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "(KeyTypeId, Vec\u003cu8\u003e)",
                                    "Value": "T::ValidatorId",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " The owner of a key. The key is the `KeyTypeId` + the encoded key."
                            
                            ]
                        
                        }
                    
                    ]
                
                },
                "HasCalls": true,
                "Calls": [
                    {
                        "Name": "set_keys",
                        "Args": [
                            {
                                "Name": "keys",
                                "Type": "T::Keys"
                            
                            },
                            {
                                "Name": "proof",
                                "Type": "Vec\u003cu8\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Sets the session key(s) of the function caller to `keys`.",
                            " Allows an account to set its session key prior to becoming a validator.",
                            " This doesn't take effect until the next session.",
                            "",
                            " The dispatch origin of this function must be signed.",
                            "",
                            " # \u003cweight\u003e",
                            " - Complexity: `O(1)`",
                            "   Actual cost depends on the number of length of `T::Keys::key_ids()` which is fixed.",
                            " - DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`",
                            " - DbWrites: `origin account`, `NextKeys`",
                            " - DbReads per key id: `KeyOwner`",
                            " - DbWrites per key id: `KeyOwner`",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "purge_keys",
                        "Args": null,
                        "Documentation": [
                            " Removes any session key(s) of the function caller.",
                            " This doesn't take effect until the next session.",
                            "",
                            " The dispatch origin of this function must be signed.",
                            "",
                            " # \u003cweight\u003e",
                            " - Complexity: `O(1)` in number of key types.",
                            "   Actual cost depends on the number of length of `T::Keys::key_ids()` which is fixed.",
                            " - DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`",
                            " - DbWrites: `NextKeys`, `origin account`",
                            " - DbWrites per key id: `KeyOwner`",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    }
                
                ],
                "HasEvents": true,
                "Events": [
                    {
                        "Name": "NewSession",
                        "Args": [
                            "SessionIndex"
                        
                        ],
                        "Documentation": [
                            " New session has happened. Note that the argument is the \\[session_index\\], not the block",
                            " number as the type might suggest."
                        
                        ]
                    
                    }
                
                ],
                "Constants": null,
                "Errors": [
                    {
                        "Name": "InvalidProof",
                        "Documentation": [
                            " Invalid ownership proof."
                        
                        ]
                    
                    },
                    {
                        "Name": "NoAssociatedValidatorId",
                        "Documentation": [
                            " No associated validator ID for account."
                        
                        ]
                    
                    },
                    {
                        "Name": "DuplicatedKey",
                        "Documentation": [
                            " Registered duplicate key."
                        
                        ]
                    
                    },
                    {
                        "Name": "NoKeys",
                        "Documentation": [
                            " No keys are associated with this account."
                        
                        ]
                    
                    },
                    {
                        "Name": "NoAccount",
                        "Documentation": [
                            " Key setting account is not live, so it's impossible to associate keys."
                        
                        ]
                    
                    }
                
                ],
                "Index": 34
            
            },
            // Historical
            {
                "Name": "Historical",
                "HasStorage": false,
                "Storage": {
                    "Prefix": "",
                    "Items": null
                
                },
                "HasCalls": false,
                "Calls": null,
                "HasEvents": false,
                "Events": null,
                "Constants": null,
                "Errors": null,
                "Index": 35
            
            },
            // Offences
            {
                "Name": "Offences",
                "HasStorage": true,
                "Storage": {
                    "Prefix": "Offences",
                    "Items": [
                        {
                            "Name": "Reports",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "ReportIdOf\u003cT\u003e",
                                    "Value": "OffenceDetails\u003cT::AccountId, T::IdentificationTuple\u003e",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " The primary structure that holds all offence records keyed by report identifiers."
                            
                            ]
                        
                        },
                        {
                            "Name": "ConcurrentReportsIndex",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": true,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "Kind",
                                    "Key2": "OpaqueTimeSlot",
                                    "Value": "Vec\u003cReportIdOf\u003cT\u003e\u003e",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " A vector of reports of the same kind that happened at the same time slot."
                            
                            ]
                        
                        },
                        {
                            "Name": "ReportsByKindIndex",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "Kind",
                                    "Value": "Vec\u003cu8\u003e",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Enumerates all reports of a kind along with the time they happened.",
                                "",
                                " All reports are sorted by the time of offence.",
                                "",
                                " Note that the actual type of this mapping is `Vec\u003cu8\u003e`, this is because values of",
                                " different types are not supported at the moment so we are doing the manual serialization."
                            
                            ]
                        
                        }
                    
                    ]
                
                },
                "HasCalls": false,
                "Calls": null,
                "HasEvents": true,
                "Events": [
                    {
                        "Name": "Offence",
                        "Args": [
                            "Kind",
                            "OpaqueTimeSlot"
                        
                        ],
                        "Documentation": [
                            " There is an offence reported of the given `kind` happened at the `session_index` and",
                            " (kind-specific) time slot. This event is not deposited for duplicate slashes.",
                            " \\[kind, timeslot\\]."
                        
                        ]
                    
                    }
                
                ],
                "Constants": null,
                "Errors": null,
                "Index": 36
            
            },
            // ImOnline
            {
                "Name": "ImOnline",
                "HasStorage": true,
                "Storage": {
                    "Prefix": "ImOnline",
                    "Items": [
                        {
                            "Name": "HeartbeatAfter",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "T::BlockNumber",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAA==",
                            "Documentation": [
                                " The block number after which it's ok to send heartbeats in the current",
                                " session.",
                                "",
                                " At the beginning of each session we set this to a value that should fall",
                                " roughly in the middle of the session duration. The idea is to first wait for",
                                " the validators to produce a block in the current session, so that the",
                                " heartbeat later on will not be necessary.",
                                "",
                                " This value will only be used as a fallback if we fail to get a proper session",
                                " progress estimate from `NextSessionRotation`, as those estimates should be",
                                " more accurate then the value we calculate for `HeartbeatAfter`."
                            
                            ]
                        
                        },
                        {
                            "Name": "Keys",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "Vec\u003cT::AuthorityId\u003e",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " The current set of keys that may issue a heartbeat."
                            
                            ]
                        
                        },
                        {
                            "Name": "ReceivedHeartbeats",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": true,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "SessionIndex",
                                    "Key2": "AuthIndex",
                                    "Value": "Vec\u003cu8\u003e",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " For each session index, we keep a mapping of `AuthIndex` to",
                                " `offchain::OpaqueNetworkState`."
                            
                            ]
                        
                        },
                        {
                            "Name": "AuthoredBlocks",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": true,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "SessionIndex",
                                    "Key2": "ValidatorId\u003cT\u003e",
                                    "Value": "u32",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAA==",
                            "Documentation": [
                                " For each session index, we keep a mapping of `ValidatorId\u003cT\u003e` to the",
                                " number of blocks authored by the given authority."
                            
                            ]
                        
                        }
                    
                    ]
                
                },
                "HasCalls": true,
                "Calls": [
                    {
                        "Name": "heartbeat",
                        "Args": [
                            {
                                "Name": "heartbeat",
                                "Type": "Heartbeat\u003cT::BlockNumber\u003e"
                            
                            },
                            {
                                "Name": "_signature",
                                "Type": "\u003cT::AuthorityId as RuntimeAppPublic\u003e::Signature"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " # \u003cweight\u003e",
                            " - Complexity: `O(K + E)` where K is length of `Keys` (heartbeat.validators_len)",
                            "   and E is length of `heartbeat.network_state.external_address`",
                            "   - `O(K)`: decoding of length `K`",
                            "   - `O(E)`: decoding/encoding of length `E`",
                            " - DbReads: pallet_session `Validators`, pallet_session `CurrentIndex`, `Keys`,",
                            "   `ReceivedHeartbeats`",
                            " - DbWrites: `ReceivedHeartbeats`",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    }
                
                ],
                "HasEvents": true,
                "Events": [
                    {
                        "Name": "HeartbeatReceived",
                        "Args": [
                            "AuthorityId"
                        
                        ],
                        "Documentation": [
                            " A new heartbeat was received from `AuthorityId` \\[authority_id\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "AllGood",
                        "Args": null,
                        "Documentation": [
                            " At the end of the session, no offence was committed."
                        
                        ]
                    
                    },
                    {
                        "Name": "SomeOffline",
                        "Args": [
                            "Vec\u003cIdentificationTuple\u003e"
                        
                        ],
                        "Documentation": [
                            " At the end of the session, at least one validator was found to be \\[offline\\]."
                        
                        ]
                    
                    }
                
                ],
                "Constants": [
                    {
                        "Name": "UnsignedPriority",
                        "Type": "TransactionPriority",
                        "Value": "//////////8=",
                        "Documentation": [
                            " A configuration for base priority of unsigned transactions.",
                            "",
                            " This is exposed so that it can be tuned for particular runtime, when",
                            " multiple pallets send unsigned transactions."
                        
                        ]
                    
                    }
                
                ],
                "Errors": [
                    {
                        "Name": "InvalidKey",
                        "Documentation": [
                            " Non existent public key."
                        
                        ]
                    
                    },
                    {
                        "Name": "DuplicatedHeartbeat",
                        "Documentation": [
                            " Duplicated heartbeat."
                        
                        ]
                    
                    }
                
                ],
                "Index": 37
            
            },
            // AuthorityDiscovery
            {
                "Name": "AuthorityDiscovery",
                "HasStorage": false,
                "Storage": {
                    "Prefix": "",
                    "Items": null
                
                },
                "HasCalls": false,
                "Calls": null,
                "HasEvents": false,
                "Events": null,
                "Constants": null,
                "Errors": null,
                "Index": 38
            
            },
            // Identity
            {
                "Name": "Identity",
                "HasStorage": true,
                "Storage": {
                    "Prefix": "Identity",
                    "Items": [
                        {
                            "Name": "IdentityOf",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "T::AccountId",
                                    "Value": "Registration\u003cBalanceOf\u003cT\u003e, T::MaxRegistrars, T::MaxAdditionalFields\u003e",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Information that is pertinent to identify the entity behind an account.",
                                "",
                                " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                            
                            ]
                        
                        },
                        {
                            "Name": "SuperOf",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": true,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "T::AccountId",
                                    "Value": "(T::AccountId, Data)",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " The super-identity of an alternative \"sub\" identity together with its name, within that",
                                " context. If the account is not some other account's sub-identity, then just `None`."
                            
                            ]
                        
                        },
                        {
                            "Name": "SubsOf",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": true,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "T::AccountId",
                                    "Value": "(BalanceOf\u003cT\u003e, BoundedVec\u003cT::AccountId, T::MaxSubAccounts\u003e)",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAAAAAAAAAAAAAAAAAAA=",
                            "Documentation": [
                                " Alternative \"sub\" identities of this account.",
                                "",
                                " The first item is the deposit, the second is a vector of the accounts.",
                                "",
                                " TWOX-NOTE: OK ― `AccountId` is a secure hash."
                            
                            ]
                        
                        },
                        {
                            "Name": "Registrars",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "BoundedVec\u003cOption\u003cRegistrarInfo\u003cBalanceOf\u003cT\u003e, T::AccountId\u003e\u003e, T\n::MaxRegistrars\u003e",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " The set of registrars. Not expected to get very big as can only be added through a",
                                " special origin (likely a council motion).",
                                "",
                                " The index into this can be cast to `RegistrarIndex` to get a valid value."
                            
                            ]
                        
                        }
                    
                    ]
                
                },
                "HasCalls": true,
                "Calls": [
                    {
                        "Name": "add_registrar",
                        "Args": [
                            {
                                "Name": "account",
                                "Type": "T::AccountId"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Add a registrar to the system.",
                            "",
                            " The dispatch origin for this call must be `T::RegistrarOrigin`.",
                            "",
                            " - `account`: the account of the registrar.",
                            "",
                            " Emits `RegistrarAdded` if successful.",
                            "",
                            " # \u003cweight\u003e",
                            " - `O(R)` where `R` registrar-count (governance-bounded and code-bounded).",
                            " - One storage mutation (codec `O(R)`).",
                            " - One event.",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "set_identity",
                        "Args": [
                            {
                                "Name": "info",
                                "Type": "Box\u003cIdentityInfo\u003cT::MaxAdditionalFields\u003e\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Set an account's identity information and reserve the appropriate deposit.",
                            "",
                            " If the account already has identity information, the deposit is taken as part payment",
                            " for the new deposit.",
                            "",
                            " The dispatch origin for this call must be _Signed_.",
                            "",
                            " - `info`: The identity information.",
                            "",
                            " Emits `IdentitySet` if successful.",
                            "",
                            " # \u003cweight\u003e",
                            " - `O(X + X' + R)`",
                            "   - where `X` additional-field-count (deposit-bounded and code-bounded)",
                            "   - where `R` judgements-count (registrar-count-bounded)",
                            " - One balance reserve operation.",
                            " - One storage mutation (codec-read `O(X' + R)`, codec-write `O(X + R)`).",
                            " - One event.",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "set_subs",
                        "Args": [
                            {
                                "Name": "subs",
                                "Type": "Vec\u003c(T::AccountId, Data)\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Set the sub-accounts of the sender.",
                            "",
                            " Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned",
                            " and an amount `SubAccountDeposit` will be reserved for each item in `subs`.",
                            "",
                            " The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                            " identity.",
                            "",
                            " - `subs`: The identity's (new) sub-accounts.",
                            "",
                            " # \u003cweight\u003e",
                            " - `O(P + S)`",
                            "   - where `P` old-subs-count (hard- and deposit-bounded).",
                            "   - where `S` subs-count (hard- and deposit-bounded).",
                            " - At most one balance operations.",
                            " - DB:",
                            "   - `P + S` storage mutations (codec complexity `O(1)`)",
                            "   - One storage read (codec complexity `O(P)`).",
                            "   - One storage write (codec complexity `O(S)`).",
                            "   - One storage-exists (`IdentityOf::contains_key`).",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "clear_identity",
                        "Args": null,
                        "Documentation": [
                            " Clear an account's identity info and all sub-accounts and return all deposits.",
                            "",
                            " Payment: All reserved balances on the account are returned.",
                            "",
                            " The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                            " identity.",
                            "",
                            " Emits `IdentityCleared` if successful.",
                            "",
                            " # \u003cweight\u003e",
                            " - `O(R + S + X)`",
                            "   - where `R` registrar-count (governance-bounded).",
                            "   - where `S` subs-count (hard- and deposit-bounded).",
                            "   - where `X` additional-field-count (deposit-bounded and code-bounded).",
                            " - One balance-unreserve operation.",
                            " - `2` storage reads and `S + 2` storage deletions.",
                            " - One event.",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "request_judgement",
                        "Args": [
                            {
                                "Name": "reg_index",
                                "Type": "Compact\u003cRegistrarIndex\u003e"
                            
                            },
                            {
                                "Name": "max_fee",
                                "Type": "Compact\u003cBalanceOf\u003cT\u003e\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Request a judgement from a registrar.",
                            "",
                            " Payment: At most `max_fee` will be reserved for payment to the registrar if judgement",
                            " given.",
                            "",
                            " The dispatch origin for this call must be _Signed_ and the sender must have a",
                            " registered identity.",
                            "",
                            " - `reg_index`: The index of the registrar whose judgement is requested.",
                            " - `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:",
                            "",
                            " ```nocompile",
                            " Self::registrars().get(reg_index).unwrap().fee",
                            " ```",
                            "",
                            " Emits `JudgementRequested` if successful.",
                            "",
                            " # \u003cweight\u003e",
                            " - `O(R + X)`.",
                            " - One balance-reserve operation.",
                            " - Storage: 1 read `O(R)`, 1 mutate `O(X + R)`.",
                            " - One event.",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "cancel_request",
                        "Args": [
                            {
                                "Name": "reg_index",
                                "Type": "RegistrarIndex"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Cancel a previous request.",
                            "",
                            " Payment: A previously reserved deposit is returned on success.",
                            "",
                            " The dispatch origin for this call must be _Signed_ and the sender must have a",
                            " registered identity.",
                            "",
                            " - `reg_index`: The index of the registrar whose judgement is no longer requested.",
                            "",
                            " Emits `JudgementUnrequested` if successful.",
                            "",
                            " # \u003cweight\u003e",
                            " - `O(R + X)`.",
                            " - One balance-reserve operation.",
                            " - One storage mutation `O(R + X)`.",
                            " - One event",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "set_fee",
                        "Args": [
                            {
                                "Name": "index",
                                "Type": "Compact\u003cRegistrarIndex\u003e"
                            
                            },
                            {
                                "Name": "fee",
                                "Type": "Compact\u003cBalanceOf\u003cT\u003e\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Set the fee required for a judgement to be requested from a registrar.",
                            "",
                            " The dispatch origin for this call must be _Signed_ and the sender must be the account",
                            " of the registrar whose index is `index`.",
                            "",
                            " - `index`: the index of the registrar whose fee is to be set.",
                            " - `fee`: the new fee.",
                            "",
                            " # \u003cweight\u003e",
                            " - `O(R)`.",
                            " - One storage mutation `O(R)`.",
                            " - Benchmark: 7.315 + R * 0.329 µs (min squares analysis)",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "set_account_id",
                        "Args": [
                            {
                                "Name": "index",
                                "Type": "Compact\u003cRegistrarIndex\u003e"
                            
                            },
                            {
                                "Name": "new",
                                "Type": "T::AccountId"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Change the account associated with a registrar.",
                            "",
                            " The dispatch origin for this call must be _Signed_ and the sender must be the account",
                            " of the registrar whose index is `index`.",
                            "",
                            " - `index`: the index of the registrar whose fee is to be set.",
                            " - `new`: the new account ID.",
                            "",
                            " # \u003cweight\u003e",
                            " - `O(R)`.",
                            " - One storage mutation `O(R)`.",
                            " - Benchmark: 8.823 + R * 0.32 µs (min squares analysis)",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "set_fields",
                        "Args": [
                            {
                                "Name": "index",
                                "Type": "Compact\u003cRegistrarIndex\u003e"
                            
                            },
                            {
                                "Name": "fields",
                                "Type": "IdentityFields"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Set the field information for a registrar.",
                            "",
                            " The dispatch origin for this call must be _Signed_ and the sender must be the account",
                            " of the registrar whose index is `index`.",
                            "",
                            " - `index`: the index of the registrar whose fee is to be set.",
                            " - `fields`: the fields that the registrar concerns themselves with.",
                            "",
                            " # \u003cweight\u003e",
                            " - `O(R)`.",
                            " - One storage mutation `O(R)`.",
                            " - Benchmark: 7.464 + R * 0.325 µs (min squares analysis)",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "provide_judgement",
                        "Args": [
                            {
                                "Name": "reg_index",
                                "Type": "Compact\u003cRegistrarIndex\u003e"
                            
                            },
                            {
                                "Name": "target",
                                "Type": "\u003cT::Lookup as StaticLookup\u003e::Source"
                            
                            },
                            {
                                "Name": "judgement",
                                "Type": "Judgement\u003cBalanceOf\u003cT\u003e\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Provide a judgement for an account's identity.",
                            "",
                            " The dispatch origin for this call must be _Signed_ and the sender must be the account",
                            " of the registrar whose index is `reg_index`.",
                            "",
                            " - `reg_index`: the index of the registrar whose judgement is being made.",
                            " - `target`: the account whose identity the judgement is upon. This must be an account",
                            "   with a registered identity.",
                            " - `judgement`: the judgement of the registrar of index `reg_index` about `target`.",
                            "",
                            " Emits `JudgementGiven` if successful.",
                            "",
                            " # \u003cweight\u003e",
                            " - `O(R + X)`.",
                            " - One balance-transfer operation.",
                            " - Up to one account-lookup operation.",
                            " - Storage: 1 read `O(R)`, 1 mutate `O(R + X)`.",
                            " - One event.",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "kill_identity",
                        "Args": [
                            {
                                "Name": "target",
                                "Type": "\u003cT::Lookup as StaticLookup\u003e::Source"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Remove an account's identity and sub-account information and slash the deposits.",
                            "",
                            " Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by",
                            " `Slash`. Verification request deposits are not returned; they should be cancelled",
                            " manually using `cancel_request`.",
                            "",
                            " The dispatch origin for this call must match `T::ForceOrigin`.",
                            "",
                            " - `target`: the account whose identity the judgement is upon. This must be an account",
                            "   with a registered identity.",
                            "",
                            " Emits `IdentityKilled` if successful.",
                            "",
                            " # \u003cweight\u003e",
                            " - `O(R + S + X)`.",
                            " - One balance-reserve operation.",
                            " - `S + 2` storage mutations.",
                            " - One event.",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "add_sub",
                        "Args": [
                            {
                                "Name": "sub",
                                "Type": "\u003cT::Lookup as StaticLookup\u003e::Source"
                            
                            },
                            {
                                "Name": "data",
                                "Type": "Data"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Add the given account to the sender's subs.",
                            "",
                            " Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                            " to the sender.",
                            "",
                            " The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                            " sub identity of `sub`."
                        
                        ]
                    
                    },
                    {
                        "Name": "rename_sub",
                        "Args": [
                            {
                                "Name": "sub",
                                "Type": "\u003cT::Lookup as StaticLookup\u003e::Source"
                            
                            },
                            {
                                "Name": "data",
                                "Type": "Data"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Alter the associated name of the given sub-account.",
                            "",
                            " The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                            " sub identity of `sub`."
                        
                        ]
                    
                    },
                    {
                        "Name": "remove_sub",
                        "Args": [
                            {
                                "Name": "sub",
                                "Type": "\u003cT::Lookup as StaticLookup\u003e::Source"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Remove the given account from the sender's subs.",
                            "",
                            " Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                            " to the sender.",
                            "",
                            " The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                            " sub identity of `sub`."
                        
                        ]
                    
                    },
                    {
                        "Name": "quit_sub",
                        "Args": null,
                        "Documentation": [
                            " Remove the sender as a sub-account.",
                            "",
                            " Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated",
                            " to the sender (*not* the original depositor).",
                            "",
                            " The dispatch origin for this call must be _Signed_ and the sender must have a registered",
                            " super-identity.",
                            "",
                            " NOTE: This should not normally be used, but is provided in the case that the non-",
                            " controller of an account is maliciously registered as a sub-account."
                        
                        ]
                    
                    }
                
                ],
                "HasEvents": true,
                "Events": [
                    {
                        "Name": "IdentitySet",
                        "Args": [
                            "AccountId"
                        
                        ],
                        "Documentation": [
                            " A name was set or reset (which will remove all judgements). \\[who\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "IdentityCleared",
                        "Args": [
                            "AccountId",
                            "Balance"
                        
                        ],
                        "Documentation": [
                            " A name was cleared, and the given balance returned. \\[who, deposit\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "IdentityKilled",
                        "Args": [
                            "AccountId",
                            "Balance"
                        
                        ],
                        "Documentation": [
                            " A name was removed and the given balance slashed. \\[who, deposit\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "JudgementRequested",
                        "Args": [
                            "AccountId",
                            "RegistrarIndex"
                        
                        ],
                        "Documentation": [
                            " A judgement was asked from a registrar. \\[who, registrar_index\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "JudgementUnrequested",
                        "Args": [
                            "AccountId",
                            "RegistrarIndex"
                        
                        ],
                        "Documentation": [
                            " A judgement request was retracted. \\[who, registrar_index\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "JudgementGiven",
                        "Args": [
                            "AccountId",
                            "RegistrarIndex"
                        
                        ],
                        "Documentation": [
                            " A judgement was given by a registrar. \\[target, registrar_index\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "RegistrarAdded",
                        "Args": [
                            "RegistrarIndex"
                        
                        ],
                        "Documentation": [
                            " A registrar was added. \\[registrar_index\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "SubIdentityAdded",
                        "Args": [
                            "AccountId",
                            "AccountId",
                            "Balance"
                        
                        ],
                        "Documentation": [
                            " A sub-identity was added to an identity and the deposit paid. \\[sub, main, deposit\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "SubIdentityRemoved",
                        "Args": [
                            "AccountId",
                            "AccountId",
                            "Balance"
                        
                        ],
                        "Documentation": [
                            " A sub-identity was removed from an identity and the deposit freed.",
                            " \\[sub, main, deposit\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "SubIdentityRevoked",
                        "Args": [
                            "AccountId",
                            "AccountId",
                            "Balance"
                        
                        ],
                        "Documentation": [
                            " A sub-identity was cleared, and the given deposit repatriated from the",
                            " main identity account to the sub-identity account. \\[sub, main, deposit\\]"
                        
                        ]
                    
                    }
                
                ],
                "Constants": [
                    {
                        "Name": "BasicDeposit",
                        "Type": "BalanceOf\u003cT\u003e",
                        "Value": "AAAQYy1ex2sFAAAAAAAAAA==",
                        "Documentation": [
                            " The amount held on deposit for a registered identity"
                        
                        ]
                    
                    },
                    {
                        "Name": "FieldDeposit",
                        "Type": "BalanceOf\u003cT\u003e",
                        "Value": "AABkp7O24A0AAAAAAAAAAA==",
                        "Documentation": [
                            " The amount held on deposit per additional field for a registered identity."
                        
                        ]
                    
                    },
                    {
                        "Name": "SubAccountDeposit",
                        "Type": "BalanceOf\u003cT\u003e",
                        "Value": "AADQEwlGjhUBAAAAAAAAAA==",
                        "Documentation": [
                            " The amount held on deposit for a registered subaccount. This should account for the fact",
                            " that one storage item's value will increase by the size of an account ID, and there will be",
                            " another trie item whose value is the size of an account ID plus 32 bytes."
                        
                        ]
                    
                    },
                    {
                        "Name": "MaxSubAccounts",
                        "Type": "u32",
                        "Value": "ZAAAAA==",
                        "Documentation": [
                            " The maximum number of sub-accounts allowed per identified account."
                        
                        ]
                    
                    },
                    {
                        "Name": "MaxAdditionalFields",
                        "Type": "u32",
                        "Value": "ZAAAAA==",
                        "Documentation": [
                            " Maximum number of additional fields that may be stored in an ID. Needed to bound the I/O",
                            " required to access an identity, but can be pretty high."
                        
                        ]
                    
                    },
                    {
                        "Name": "MaxRegistrars",
                        "Type": "u32",
                        "Value": "FAAAAA==",
                        "Documentation": [
                            " Maxmimum number of registrars allowed in the system. Needed to bound the complexity",
                            " of, e.g., updating judgements."
                        
                        ]
                    
                    }
                
                ],
                "Errors": [
                    {
                        "Name": "TooManySubAccounts",
                        "Documentation": [
                            " Too many subs-accounts."
                        
                        ]
                    
                    },
                    {
                        "Name": "NotFound",
                        "Documentation": [
                            " Account isn't found."
                        
                        ]
                    
                    },
                    {
                        "Name": "NotNamed",
                        "Documentation": [
                            " Account isn't named."
                        
                        ]
                    
                    },
                    {
                        "Name": "EmptyIndex",
                        "Documentation": [
                            " Empty index."
                        
                        ]
                    
                    },
                    {
                        "Name": "FeeChanged",
                        "Documentation": [
                            " Fee is changed."
                        
                        ]
                    
                    },
                    {
                        "Name": "NoIdentity",
                        "Documentation": [
                            " No identity found."
                        
                        ]
                    
                    },
                    {
                        "Name": "StickyJudgement",
                        "Documentation": [
                            " Sticky judgement."
                        
                        ]
                    
                    },
                    {
                        "Name": "JudgementGiven",
                        "Documentation": [
                            " Judgement given."
                        
                        ]
                    
                    },
                    {
                        "Name": "InvalidJudgement",
                        "Documentation": [
                            " Invalid judgement."
                        
                        ]
                    
                    },
                    {
                        "Name": "InvalidIndex",
                        "Documentation": [
                            " The index is invalid."
                        
                        ]
                    
                    },
                    {
                        "Name": "InvalidTarget",
                        "Documentation": [
                            " The target is invalid."
                        
                        ]
                    
                    },
                    {
                        "Name": "TooManyFields",
                        "Documentation": [
                            " Too many additional fields."
                        
                        ]
                    
                    },
                    {
                        "Name": "TooManyRegistrars",
                        "Documentation": [
                            " Maximum amount of registrars reached. Cannot add any more."
                        
                        ]
                    
                    },
                    {
                        "Name": "AlreadyClaimed",
                        "Documentation": [
                            " Account ID is already named."
                        
                        ]
                    
                    },
                    {
                        "Name": "NotSub",
                        "Documentation": [
                            " Sender is not a sub-account."
                        
                        ]
                    
                    },
                    {
                        "Name": "NotOwned",
                        "Documentation": [
                            " Sub-account isn't owned by sender."
                        
                        ]
                    
                    }
                
                ],
                "Index": 40
            
            },
            // TechCouncil
            {
                "Name": "TechCouncil",
                "HasStorage": true,
                "Storage": {
                    "Prefix": "Instance1Collective",
                    "Items": [
                        {
                            "Name": "Proposals",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "BoundedVec\u003cT::Hash, T::MaxProposals\u003e",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " The hashes of the active proposals."
                            
                            ]
                        
                        },
                        {
                            "Name": "ProposalOf",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": true
                                    
                                    },
                                    "Key": "T::Hash",
                                    "Value": "\u003cT as Config\u003cI\u003e\u003e::Proposal",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Actual proposal for a given hash, if it's current."
                            
                            ]
                        
                        },
                        {
                            "Name": "Voting",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": true
                                    
                                    },
                                    "Key": "T::Hash",
                                    "Value": "Votes\u003cT::AccountId, T::BlockNumber\u003e",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " Votes on a given proposal, if it is ongoing."
                            
                            ]
                        
                        },
                        {
                            "Name": "ProposalCount",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "u32",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAA==",
                            "Documentation": [
                                " Proposals so far."
                            
                            ]
                        
                        },
                        {
                            "Name": "Members",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "Vec\u003cT::AccountId\u003e",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " The current members of the collective. This is stored sorted (just by value)."
                            
                            ]
                        
                        },
                        {
                            "Name": "Prime",
                            "Modifier": {
                                "IsOptional": true,
                                "IsDefault": false,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "T::AccountId",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": [
                                " The prime member that helps determine the default vote behavior in case of absentations."
                            
                            ]
                        
                        }
                    
                    ]
                
                },
                "HasCalls": true,
                "Calls": [
                    {
                        "Name": "set_members",
                        "Args": [
                            {
                                "Name": "new_members",
                                "Type": "Vec\u003cT::AccountId\u003e"
                            
                            },
                            {
                                "Name": "prime",
                                "Type": "Option\u003cT::AccountId\u003e"
                            
                            },
                            {
                                "Name": "old_count",
                                "Type": "MemberCount"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Set the collective's membership.",
                            "",
                            " - `new_members`: The new member list. Be nice to the chain and provide it sorted.",
                            " - `prime`: The prime member whose vote sets the default.",
                            " - `old_count`: The upper bound for the previous number of members in storage.",
                            "                Used for weight estimation.",
                            "",
                            " Requires root origin.",
                            "",
                            " NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but",
                            "       the weight estimations rely on it to estimate dispatchable weight.",
                            "",
                            " # \u003cweight\u003e",
                            " ## Weight",
                            " - `O(MP + N)` where:",
                            "   - `M` old-members-count (code- and governance-bounded)",
                            "   - `N` new-members-count (code- and governance-bounded)",
                            "   - `P` proposals-count (code-bounded)",
                            " - DB:",
                            "   - 1 storage mutation (codec `O(M)` read, `O(N)` write) for reading and writing the members",
                            "   - 1 storage read (codec `O(P)`) for reading the proposals",
                            "   - `P` storage mutations (codec `O(M)`) for updating the votes for each proposal",
                            "   - 1 storage write (codec `O(1)`) for deleting the old `prime` and setting the new one",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "execute",
                        "Args": [
                            {
                                "Name": "proposal",
                                "Type": "Box\u003c\u003cT as Config\u003cI\u003e\u003e::Proposal\u003e"
                            
                            },
                            {
                                "Name": "length_bound",
                                "Type": "Compact\u003cu32\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Dispatch a proposal from a member using the `Member` origin.",
                            "",
                            " Origin must be a member of the collective.",
                            "",
                            " # \u003cweight\u003e",
                            " ## Weight",
                            " - `O(M + P)` where `M` members-count (code-bounded) and `P` complexity of dispatching `proposal`",
                            " - DB: 1 read (codec `O(M)`) + DB access of `proposal`",
                            " - 1 event",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "propose",
                        "Args": [
                            {
                                "Name": "threshold",
                                "Type": "Compact\u003cMemberCount\u003e"
                            
                            },
                            {
                                "Name": "proposal",
                                "Type": "Box\u003c\u003cT as Config\u003cI\u003e\u003e::Proposal\u003e"
                            
                            },
                            {
                                "Name": "length_bound",
                                "Type": "Compact\u003cu32\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Add a new proposal to either be voted on or executed directly.",
                            "",
                            " Requires the sender to be member.",
                            "",
                            " `threshold` determines whether `proposal` is executed directly (`threshold \u003c 2`)",
                            " or put up for voting.",
                            "",
                            " # \u003cweight\u003e",
                            " ## Weight",
                            " - `O(B + M + P1)` or `O(B + M + P2)` where:",
                            "   - `B` is `proposal` size in bytes (length-fee-bounded)",
                            "   - `M` is members-count (code- and governance-bounded)",
                            "   - branching is influenced by `threshold` where:",
                            "     - `P1` is proposal execution complexity (`threshold \u003c 2`)",
                            "     - `P2` is proposals-count (code-bounded) (`threshold \u003e= 2`)",
                            " - DB:",
                            "   - 1 storage read `is_member` (codec `O(M)`)",
                            "   - 1 storage read `ProposalOf::contains_key` (codec `O(1)`)",
                            "   - DB accesses influenced by `threshold`:",
                            "     - EITHER storage accesses done by `proposal` (`threshold \u003c 2`)",
                            "     - OR proposal insertion (`threshold \u003c= 2`)",
                            "       - 1 storage mutation `Proposals` (codec `O(P2)`)",
                            "       - 1 storage mutation `ProposalCount` (codec `O(1)`)",
                            "       - 1 storage write `ProposalOf` (codec `O(B)`)",
                            "       - 1 storage write `Voting` (codec `O(M)`)",
                            "   - 1 event",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "vote",
                        "Args": [
                            {
                                "Name": "proposal",
                                "Type": "T::Hash"
                            
                            },
                            {
                                "Name": "index",
                                "Type": "Compact\u003cProposalIndex\u003e"
                            
                            },
                            {
                                "Name": "approve",
                                "Type": "bool"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Add an aye or nay vote for the sender to the given proposal.",
                            "",
                            " Requires the sender to be a member.",
                            "",
                            " Transaction fees will be waived if the member is voting on any particular proposal",
                            " for the first time and the call is successful. Subsequent vote changes will charge a fee.",
                            " # \u003cweight\u003e",
                            " ## Weight",
                            " - `O(M)` where `M` is members-count (code- and governance-bounded)",
                            " - DB:",
                            "   - 1 storage read `Members` (codec `O(M)`)",
                            "   - 1 storage mutation `Voting` (codec `O(M)`)",
                            " - 1 event",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "close",
                        "Args": [
                            {
                                "Name": "proposal_hash",
                                "Type": "T::Hash"
                            
                            },
                            {
                                "Name": "index",
                                "Type": "Compact\u003cProposalIndex\u003e"
                            
                            },
                            {
                                "Name": "proposal_weight_bound",
                                "Type": "Compact\u003cWeight\u003e"
                            
                            },
                            {
                                "Name": "length_bound",
                                "Type": "Compact\u003cu32\u003e"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Close a vote that is either approved, disapproved or whose voting period has ended.",
                            "",
                            " May be called by any signed account in order to finish voting and close the proposal.",
                            "",
                            " If called before the end of the voting period it will only close the vote if it is",
                            " has enough votes to be approved or disapproved.",
                            "",
                            " If called after the end of the voting period abstentions are counted as rejections",
                            " unless there is a prime member set and the prime member cast an approval.",
                            "",
                            " If the close operation completes successfully with disapproval, the transaction fee will",
                            " be waived. Otherwise execution of the approved operation will be charged to the caller.",
                            "",
                            " + `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed proposal.",
                            " + `length_bound`: The upper bound for the length of the proposal in storage. Checked via",
                            "                   `storage::read` so it is `size_of::\u003cu32\u003e() == 4` larger than the pure length.",
                            "",
                            " # \u003cweight\u003e",
                            " ## Weight",
                            " - `O(B + M + P1 + P2)` where:",
                            "   - `B` is `proposal` size in bytes (length-fee-bounded)",
                            "   - `M` is members-count (code- and governance-bounded)",
                            "   - `P1` is the complexity of `proposal` preimage.",
                            "   - `P2` is proposal-count (code-bounded)",
                            " - DB:",
                            "  - 2 storage reads (`Members`: codec `O(M)`, `Prime`: codec `O(1)`)",
                            "  - 3 mutations (`Voting`: codec `O(M)`, `ProposalOf`: codec `O(B)`, `Proposals`: codec `O(P2)`)",
                            "  - any mutations done while executing `proposal` (`P1`)",
                            " - up to 3 events",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    },
                    {
                        "Name": "disapprove_proposal",
                        "Args": [
                            {
                                "Name": "proposal_hash",
                                "Type": "T::Hash"
                            
                            }
                        
                        ],
                        "Documentation": [
                            " Disapprove a proposal, close, and remove it from the system, regardless of its current state.",
                            "",
                            " Must be called by the Root origin.",
                            "",
                            " Parameters:",
                            " * `proposal_hash`: The hash of the proposal that should be disapproved.",
                            "",
                            " # \u003cweight\u003e",
                            " Complexity: O(P) where P is the number of max proposals",
                            " DB Weight:",
                            " * Reads: Proposals",
                            " * Writes: Voting, Proposals, ProposalOf",
                            " # \u003c/weight\u003e"
                        
                        ]
                    
                    }
                
                ],
                "HasEvents": true,
                "Events": [
                    {
                        "Name": "Proposed",
                        "Args": [
                            "AccountId",
                            "ProposalIndex",
                            "Hash",
                            "MemberCount"
                        
                        ],
                        "Documentation": [
                            " A motion (given hash) has been proposed (by given account) with a threshold (given",
                            " `MemberCount`).",
                            " \\[account, proposal_index, proposal_hash, threshold\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "Voted",
                        "Args": [
                            "AccountId",
                            "Hash",
                            "bool",
                            "MemberCount",
                            "MemberCount"
                        
                        ],
                        "Documentation": [
                            " A motion (given hash) has been voted on by given account, leaving",
                            " a tally (yes votes and no votes given respectively as `MemberCount`).",
                            " \\[account, proposal_hash, voted, yes, no\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "Approved",
                        "Args": [
                            "Hash"
                        
                        ],
                        "Documentation": [
                            " A motion was approved by the required threshold.",
                            " \\[proposal_hash\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "Disapproved",
                        "Args": [
                            "Hash"
                        
                        ],
                        "Documentation": [
                            " A motion was not approved by the required threshold.",
                            " \\[proposal_hash\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "Executed",
                        "Args": [
                            "Hash",
                            "DispatchResult"
                        
                        ],
                        "Documentation": [
                            " A motion was executed; result will be `Ok` if it returned without error.",
                            " \\[proposal_hash, result\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "MemberExecuted",
                        "Args": [
                            "Hash",
                            "DispatchResult"
                        
                        ],
                        "Documentation": [
                            " A single member did some action; result will be `Ok` if it returned without error.",
                            " \\[proposal_hash, result\\]"
                        
                        ]
                    
                    },
                    {
                        "Name": "Closed",
                        "Args": [
                            "Hash",
                            "MemberCount",
                            "MemberCount"
                        
                        ],
                        "Documentation": [
                            " A proposal was closed because its threshold was reached or after its duration was up.",
                            " \\[proposal_hash, yes, no\\]"
                        
                        ]
                    
                    }
                
                ],
                "Constants": null,
                "Errors": [
                    {
                        "Name": "NotMember",
                        "Documentation": [
                            " Account is not a member"
                        
                        ]
                    
                    },
                    {
                        "Name": "DuplicateProposal",
                        "Documentation": [
                            " Duplicate proposals not allowed"
                        
                        ]
                    
                    },
                    {
                        "Name": "ProposalMissing",
                        "Documentation": [
                            " Proposal must exist"
                        
                        ]
                    
                    },
                    {
                        "Name": "WrongIndex",
                        "Documentation": [
                            " Mismatched index"
                        
                        ]
                    
                    },
                    {
                        "Name": "DuplicateVote",
                        "Documentation": [
                            " Duplicate vote ignored"
                        
                        ]
                    
                    },
                    {
                        "Name": "AlreadyInitialized",
                        "Documentation": [
                            " Members are already initialized!"
                        
                        ]
                    
                    },
                    {
                        "Name": "TooEarly",
                        "Documentation": [
                            " The close call was made too early, before the end of the voting."
                        
                        ]
                    
                    },
                    {
                        "Name": "TooManyProposals",
                        "Documentation": [
                            " There can only be a maximum of `MaxProposals` active proposals."
                        
                        ]
                    
                    },
                    {
                        "Name": "WrongProposalWeight",
                        "Documentation": [
                            " The given weight bound for the proposal was too low."
                        
                        ]
                    
                    },
                    {
                        "Name": "WrongProposalLength",
                        "Documentation": [
                            " The given length bound for the proposal was too low."
                        
                        ]
                    
                    }
                
                ],
                "Index": 50
            
            },
            // Poc
            {
                "Name": "Poc",
                "HasStorage": true,
                "Storage": {
                    "Prefix": "Poc",
                    "Items": [
                        {
                            "Name": "CurrentEra",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "Era\u003cT::BlockNumber\u003e",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAAAAAAA=",
                            "Documentation": null
                        
                        },
                        {
                            "Name": "VoterRewards",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": true,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": true,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "EraIndex",
                                    "Key2": "T::AccountId",
                                    "Value": "BalanceOf\u003cT\u003e",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": true,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAAAAAAAAAAAAAAAAAA==",
                            "Documentation": null
                        
                        },
                        {
                            "Name": "Commitments",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": true,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "T::AccountId",
                                    "Value": "CommitmentOf\u003cT\u003e",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=",
                            "Documentation": null
                        
                        },
                        {
                            "Name": "Members",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "Vec\u003cT::AccountId\u003e",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AA==",
                            "Documentation": null
                        
                        },
                        {
                            "Name": "Candidates",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": false,
                                "AsType": "",
                                "IsMap": true,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": true,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "T::AccountId",
                                    "Value": "BalanceOf\u003cT\u003e",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAAAAAAAAAAAAAAAAAA==",
                            "Documentation": null
                        
                        },
                        {
                            "Name": "CandidatesCount",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "u32",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAA==",
                            "Documentation": null
                        
                        },
                        {
                            "Name": "LockedAmount",
                            "Modifier": {
                                "IsOptional": false,
                                "IsDefault": true,
                                "IsRequired": false
                            
                            },
                            "Type": {
                                "IsType": true,
                                "AsType": "BalanceOf\u003cT\u003e",
                                "IsMap": false,
                                "AsMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key": "",
                                    "Value": "",
                                    "Linked": false
                                
                                },
                                "IsDoubleMap": false,
                                "AsDoubleMap": {
                                    "Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    },
                                    "Key1": "",
                                    "Key2": "",
                                    "Value": "",
                                    "Key2Hasher": {
                                        "IsBlake2_128": false,
                                        "IsBlake2_256": false,
                                        "IsBlake2_128Concat": false,
                                        "IsTwox128": false,
                                        "IsTwox256": false,
                                        "IsTwox64Concat": false,
                                        "IsIdentity": false
                                    
                                    }
                                
                                },
                                "IsNMap": false,
                                "AsNMap": {
                                    "Keys": null,
                                    "Hashers": null,
                                    "Value": ""
                                
                                }
                            
                            },
                            "Fallback": "AAAAAAAAAAAAAAAAAAAAAA==",
                            "Documentation": null
                        
                        }
                    
                    ]
                
                },
                "HasCalls": true,
                "Calls": [
                    {
                        "Name": "start_candidacy",
                        "Args": null,
                        "Documentation": null
                    
                    },
                    {
                        "Name": "stop_candidacy",
                        "Args": null,
                        "Documentation": null
                    
                    },
                    {
                        "Name": "commit",
                        "Args": [
                            {
                                "Name": "amount",
                                "Type": "Compact\u003cBalanceOf\u003cT\u003e\u003e"
                            
                            },
                            {
                                "Name": "duration",
                                "Type": "LockDuration"
                            
                            },
                            {
                                "Name": "candidate",
                                "Type": "T::AccountId"
                            
                            }
                        
                        ],
                        "Documentation": null
                    
                    },
                    {
                        "Name": "add_funds",
                        "Args": [
                            {
                                "Name": "amount",
                                "Type": "Compact\u003cBalanceOf\u003cT\u003e\u003e"
                            
                            }
                        
                        ],
                        "Documentation": null
                    
                    },
                    {
                        "Name": "unbond",
                        "Args": null,
                        "Documentation": null
                    
                    },
                    {
                        "Name": "withdraw",
                        "Args": null,
                        "Documentation": null
                    
                    },
                    {
                        "Name": "vote_candidate",
                        "Args": [
                            {
                                "Name": "candidate",
                                "Type": "T::AccountId"
                            
                            }
                        
                        ],
                        "Documentation": null
                    
                    }
                
                ],
                "HasEvents": true,
                "Events": [
                    {
                        "Name": "CandidateAdded",
                        "Args": [
                            "AccountId"
                        
                        ],
                        "Documentation": [
                            " Start candidacy"
                        
                        ]
                    
                    },
                    {
                        "Name": "CandidateRemoved",
                        "Args": [
                            "AccountId"
                        
                        ],
                        "Documentation": [
                            " Stop candidacy"
                        
                        ]
                    
                    },
                    {
                        "Name": "Committed",
                        "Args": [
                            "AccountId",
                            "BalanceOf"
                        
                        ],
                        "Documentation": [
                            " Created a new committment"
                        
                        ]
                    
                    },
                    {
                        "Name": "FundsAdded",
                        "Args": [
                            "AccountId",
                            "BalanceOf"
                        
                        ],
                        "Documentation": [
                            " Add more funds to existing commitment"
                        
                        ]
                    
                    },
                    {
                        "Name": "UnbondingStarted",
                        "Args": [
                            "AccountId",
                            "BalanceOf"
                        
                        ],
                        "Documentation": [
                            " The user has started the unbonding process"
                        
                        ]
                    
                    },
                    {
                        "Name": "BondWithdrawn",
                        "Args": [
                            "AccountId",
                            "BalanceOf"
                        
                        ],
                        "Documentation": [
                            " Bond has been withdrawn"
                        
                        ]
                    
                    },
                    {
                        "Name": "Voted",
                        "Args": [
                            "AccountId",
                            "AccountId",
                            "BalanceOf"
                        
                        ],
                        "Documentation": [
                            " Voter,Candidate,VotingPower"
                        
                        ]
                    
                    },
                    {
                        "Name": "VoterRewarded",
                        "Args": [
                            "EraIndex",
                            "AccountId",
                            "BalanceOf"
                        
                        ],
                        "Documentation": [
                            " Voter,Reward"
                        
                        ]
                    
                    },
                    {
                        "Name": "Elected",
                        "Args": [
                            "EraIndex",
                            "AccountId",
                            "BalanceOf"
                        
                        ],
                        "Documentation": [
                            " Era, Winner,Weight"
                        
                        ]
                    
                    }
                
                ],
                "Constants": [
                    {
                        "Name": "EraDuration",
                        "Type": "primitives::BlockNumber",
                        "Value": "QOwAAA==",
                        "Documentation": [
                            " How long (in block count) is the era"
                        
                        ]
                    
                    },
                    {
                        "Name": "NominatorAPY",
                        "Type": "Perbill",
                        "Value": "AOH1BQ==",
                        "Documentation": [
                            " Yearly nominator returns in % APY"
                        
                        ]
                    
                    },
                    {
                        "Name": "CouncilInflation",
                        "Type": "Perbill",
                        "Value": "gJaYAA==",
                        "Documentation": [
                            " Yearly inflation rate to pay for council rewards"
                        
                        ]
                    
                    },
                    {
                        "Name": "CandidacyDeposit",
                        "Type": "BalanceOf\u003cT\u003e",
                        "Value": "AAAAoe3MzhvC0wAAAAAAAA==",
                        "Documentation": [
                            " How much funds need to be reserved for active candidacy"
                        
                        ]
                    
                    },
                    {
                        "Name": "MinLockAmount",
                        "Type": "BalanceOf\u003cT\u003e",
                        "Value": "AACA9krhxwItFQAAAAAAAA==",
                        "Documentation": [
                            " Minimum amount of currency needed to create a commitment"
                        
                        ]
                    
                    },
                    {
                        "Name": "TotalLockedCap",
                        "Type": "BalanceOf\u003cT\u003e",
                        "Value": "AAAA0HkAoT95XHYGAAAAAA==",
                        "Documentation": [
                            " Total amount of currency that can be locked"
                        
                        ]
                    
                    },
                    {
                        "Name": "MaxCandidates",
                        "Type": "u32",
                        "Value": "ZAAAAA==",
                        "Documentation": [
                            " How many tech council candidates can apply at once."
                        
                        ]
                    
                    },
                    {
                        "Name": "MaxMembers",
                        "Type": "u32",
                        "Value": "CQAAAA==",
                        "Documentation": [
                            " How many tech council members are we voting in."
                        
                        ]
                    
                    }
                
                ],
                "Errors": [
                    {
                        "Name": "AlreadyCandidate",
                        "Documentation": [
                            " Account is already running as a candidate"
                        
                        ]
                    
                    },
                    {
                        "Name": "NotCandidate",
                        "Documentation": [
                            " Candidate not found"
                        
                        ]
                    
                    },
                    {
                        "Name": "CannotLeave",
                        "Documentation": [
                            " Candidate is a member and cannot withdraw candidacy"
                        
                        ]
                    
                    },
                    {
                        "Name": "MaxCandidatesReached",
                        "Documentation": [
                            " Already have maximum allowed number of candidates"
                        
                        ]
                    
                    },
                    {
                        "Name": "AlreadyCommitted",
                        "Documentation": [
                            " Account already has an active commitment"
                        
                        ]
                    
                    },
                    {
                        "Name": "CommitmentNotFound",
                        "Documentation": [
                            " Cannot operate on a non existing commitment"
                        
                        ]
                    
                    },
                    {
                        "Name": "NotCommitted",
                        "Documentation": [
                            " The commitment is not active"
                        
                        ]
                    
                    },
                    {
                        "Name": "CannotWithdrawLocked",
                        "Documentation": [
                            " Funds are still locked and cannot be withdrawn"
                        
                        ]
                    
                    },
                    {
                        "Name": "InsufficientAmount",
                        "Documentation": [
                            " Bonded amount is too small"
                        
                        ]
                    
                    },
                    {
                        "Name": "OverSubscribed",
                        "Documentation": [
                            " The PoC system already has maximum amount committed"
                        
                        ]
                    
                    }
                
                ],
                "Index": 51
            
            }
        
        ],
        "Extrinsic": {
            "Version": 4,
            "SignedExtensions": [
                "CheckSpecVersion",
                "CheckTxVersion",
                "CheckGenesis",
                "CheckMortality",
                "CheckNonce",
                "CheckWeight",
                "ChargeTransactionPayment",
                "SetEvmOrigin"
            
            ]
        
        }
    
    },
    "AsMetadataV14": {
        "Lookup": {
            "Types": null
        
        },
        "Pallets": null,
        "Extrinsic": {
            "Type": {

            
            },
            "Version": 0,
            "SignedExtensions": null
        
        },
        "Type": {

        
        },
        "EfficientLookup": null
    
    }
}